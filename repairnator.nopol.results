nopolinfo #0
location: FailureLocation{className='com.phoenixnap.oss.ramlapisync.generation.rules.Issue159RulesTest', failingMethods=[com.phoenixnap.oss.ramlapisync.generation.rules.Issue159RulesTest#applySpring4ClientStubRule_shouldCreate_validCode], erroringMethods=[], failures=[FailureType{failureName='org.junit.ComparisonFailure', failureDetail='expected:<...-------com.gen.test.[PersonManagerClient.java-----------------------------------  package com.gen.test;  import java.util.List; import com.gen.test.model.Manager; import org.springframework.http.ResponseEntity;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.5)  *   */ public interface PersonManagerClient {       /**      * No description      *       */     public ResponseEntity<List<Manager>> getPersonsManagers();      /**      * No description      *       * @param manager The Request Body Payload      */     public ResponseEntity<Manager> createPersonsManager(Manager manager);  } -----------------------------------com.gen.test.PersonManagerClientImpl.java-----------------------------------  package com.gen.test;  import java.util.ArrayList; import java.util.List; import com.gen.test.model.Manager; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.core.ParameterizedTypeReference; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Component; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.5)  *   */ @Component public class PersonManagerClientImpl     implements PersonManagerClient {      @Autowired     private RestTemplate restTemplate;     @Value("${client.url}")     private String baseUrl;      /**      * No description      *       */     public ResponseEntity<List<Manager>> getPersonsManagers() {         HttpHeaders httpHeaders = new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList<MediaType> acceptsList = new ArrayList<MediaType>();         acceptsList.add(MediaType.valueOf("application/json"));         httpHeaders.setAccept(acceptsList);         String url = baseUrl.concat("/organization/persons/managers");         UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents = builder.build();         HttpEntity httpEntity = new HttpEntity(httpHeaders);         class _P extends org.springframework.core.ParameterizedTypeReference<java.util.List<com.gen.test.model.Manager>>{};         ParameterizedTypeReference<List<Manager>> typeReference = new _P();         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, typeReference);     }      /**      * No description      *       */     public ResponseEntity<Manager> createPersonsManager(Manager manager) {         HttpHeaders httpHeaders = new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList<MediaType> acceptsList = new ArrayList<MediaType>();         httpHeaders.setContentType(MediaType.valueOf("application/json"));         acceptsList.add(MediaType.valueOf("application/json"));         httpHeaders.setAccept(acceptsList);         String url = baseUrl.concat("/organization/persons/managers");         UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents = builder.build();         HttpEntity httpEntity = new HttpEntity(manager, httpHeaders);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.POST, httpEntity, Manager.class);     }  }]> but was:<...-------com.gen.test.[ManagerClient.java-----------------------------------  package com.gen.test;  import java.util.List; import com.gen.test.model.Manager; import org.springframework.http.ResponseEntity;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.5)  *   */ public interface ManagerClient {       /**      * No description      *       */     public ResponseEntity<List<Manager>> getPersonsManagers();      /**      * No description      *       * @param manager The Request Body Payload      */     public ResponseEntity<Manager> createPersonsManager(Manager manager);  } -----------------------------------com.gen.test.PersonManagerClientImpl.java-----------------------------------  package com.gen.test;  import java.util.ArrayList; import java.util.List; import com.gen.test.model.Manager; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.core.ParameterizedTypeReference; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Component; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.5)  *   */ @Component public class PersonManagerClientImpl     implements ManagerClient {      @Autowired     private RestTemplate restTemplate;     @Value("${client.url}")     private String baseUrl;      /**      * No description      *       */     public ResponseEntity<List<Manager>> getPersonsManagers() {         HttpHeaders httpHeaders = new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList<MediaType> acceptsList = new ArrayList<MediaType>();         acceptsList.add(MediaType.valueOf("application/json"));         httpHeaders.setAccept(acceptsList);         String url = baseUrl.concat("/organization/persons/managers");         UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents = builder.build();         HttpEntity httpEntity = new HttpEntity(httpHeaders);         class _P extends org.springframework.core.ParameterizedTypeReference<java.util.List<com.gen.test.model.Manager>>{};         ParameterizedTypeReference<List<Manager>> typeReference = new _P();         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, typeReference);     }      /**      * No description      *       */     public ResponseEntity<Manager> createPersonsManager(Manager manager) {         HttpHeaders httpHeaders = new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList<MediaType> acceptsList = new ArrayList<MediaType>();         httpHeaders.setContentType(MediaType.valueOf("application/json"));         acceptsList.add(MediaType.valueOf("application/json"));         httpHeaders.setAccept(acceptsList);         String url = baseUrl.concat("/organization/persons/managers");         UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents = builder.build();         HttpEntity httpEntity = new HttpEntity(manager, httpHeaders);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.POST, httpEntity, Manager.class);     }  } ]>', isError=false}], nbFailures=1, nbErrors=0}
status: NOPATCH
dateEnd: Tue Jun 06 11:49:07 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[./workspace/phoenixnap/springmvc-raml-plugin/236332202/springmvc-raml-annotations/src/main/java, /root/./workspace/phoenixnap/springmvc-raml-plugin/236332202/springmvc-raml-annotations/src/main/java, ./workspace/phoenixnap/springmvc-raml-plugin/236332202/springmvc-raml-parser/src/main/java, /root/./workspace/phoenixnap/springmvc-raml-plugin/236332202/springmvc-raml-parser/src/main/java, ./workspace/phoenixnap/springmvc-raml-plugin/236332202/springmvc-raml-plugin/src/main/java, /root/./workspace/phoenixnap/springmvc-raml-plugin/236332202/springmvc-raml-plugin/src/main/java], projectClasspath='[Ljava.net.URL;@69e49a81', projectTests=[com.phoenixnap.oss.ramlapisync.generation.rules.Issue159RulesTest], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



