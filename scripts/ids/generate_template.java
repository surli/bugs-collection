/*
 * Trident - A Multithreaded Server Alternative
 * Copyright 2017 The TridentSDK Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package {package_name};

import java.util.HashMap;
import java.util.Map;
import javax.annotation.concurrent.Immutable;
import net.tridentsdk.util.Int2ReferenceOpenHashMap;

/**
 * Represents the type of a block or an item.
 *
 * GENERATED BY /scripts/ids/generate.py<br>
 *
 * Content sourced from the Official Minecraft Wiki, http://minecraft.gamepedia.com/<br>
 * Minecraft Wiki content, which consists of all content on the pages used, is licensed under
 * <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/">Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)</a>.<br>
 *
 * Minecraft is a registered trademark of Mojang AB.
 *
 * @author TridentSDK
 * @since 0.3-alpha-DP
 */
@Immutable
public enum {class_name} {{

    // BEGIN BLOCKS

{blocks}
    // BEGIN ITEMS

{items}
{fields}
    /**
     * The constructor for all {class_name}s.
     */
{constructor}
{methods}
{is_item_method}

    @Override
    public String toString() {{
        return this.stringId;
    }}

    /**
     * Mappings of ID values to their respective substances,
     * substances can contain 400+ entries and that is not
     * worth using O(n) iteration.
     */
    private static final Int2ReferenceOpenHashMap<{class_name}> SUBSTANCE_BY_NUMERIC_MAP = new Int2ReferenceOpenHashMap<>();
    private static final Map<String, {class_name}> SUBSTANCE_BY_STRING_MAP = new HashMap<>();
    private static final Map<String, {class_name}> SUBSTANCE_BY_NAME_MAP = new HashMap<>();

    static {{
        for ({class_name} s : values()) {{
            SUBSTANCE_BY_NUMERIC_MAP.put(s.id, s);
            SUBSTANCE_BY_STRING_MAP.put(s.stringId, s);
            SUBSTANCE_BY_NAME_MAP.put(s.displayName, s);
        }}
        SUBSTANCE_BY_NUMERIC_MAP.trim();
    }}

    /**
     * Obtains the substance that is represented by the
     * given ID value.
     *
     * @param id the ID value of the substance to find
     * @return the substance
     */
    public static {class_name} fromNumericId(int id) {{
        {class_name} substance = SUBSTANCE_BY_NUMERIC_MAP.get(id);
        if (substance == null) {{
            throw new IllegalArgumentException("Invalid {class_name} ID (" + id + ")");
        }}
        return substance;
    }}

    /**
     * Obtains the substance that is represented by the
     * given string ID.
     *
     * @param id the string ID value of the substance to find
     * @return the substance
     */
    public static {class_name} fromStringId(String id) {{
        {class_name} substance = SUBSTANCE_BY_STRING_MAP.get(id);
        if (substance == null) {{
            throw new IllegalArgumentException("Invalid {class_name} ID (" + id + ")");
        }}
        return substance;
    }}

    /**
     * Obtains the substance with the given name.
     *
     * @param name the name of the substance to find
     * @return the substance
     */
    public static {class_name} fromName(String name) {{
        {class_name} substance = SUBSTANCE_BY_NAME_MAP.get(name);
        if (substance == null) {{
            throw new IllegalArgumentException("Invalid {class_name} name (" + name + ")");
        }}
        return substance;
    }}

}}