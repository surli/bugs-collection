<?xml version="1.0" encoding="UTF-8"?>
<asserts>
    <assert id="assertInsert" sql="insert into `order`('order_id','state') values (1,'RUNNING')" expected-sql="insert into [Token(order)]('order_id','state') values (1,'RUNNING')">
        <tables>
            <table name="order" />
        </tables>
        <condition-contexts>
            <condition-context>
                <condition column-name="order_id" table-name="order" operator="EQUAL">
                    <value value="1" type="java.lang.Integer" />
                </condition>
                <condition column-name="state" table-name="order" operator="EQUAL">
                    <value value="RUNNING" type="java.lang.String" />
                </condition>
            </condition-context>
        </condition-contexts>
    </assert>
    
    <assert id="assertInsertWithAutoIncrementColumn" sql="insert into `order`('state') values('RUNNING')" expected-sql="insert into [Token(order)]('state', order_id) values('RUNNING', 1)">
        <tables>
            <table name="order" />
        </tables>
        <condition-contexts>
            <condition-context>
                <condition column-name="state" table-name="order" operator="EQUAL">
                    <value value="RUNNING" type="java.lang.String" />
                </condition>
                <condition column-name="order_id" table-name="order" operator="EQUAL">
                    <value value="1" type="java.lang.Integer" />
                </condition>
            </condition-context>
        </condition-contexts>
    </assert>
    
    <assert id="assertInsertWithoutAutoIncrementColumn" sql="insert into `user`('user_id', 'state') values(1, 'RUNNING')" expected-sql="insert into [Token(user)]('user_id', 'state') values(1, 'RUNNING')">
        <tables>
            <table name="user" />
        </tables>
        <condition-contexts>
            <condition-context>
                <condition column-name="user_id" table-name="user" operator="EQUAL">
                    <value value="1" type="java.lang.Integer" />
                </condition>
                <condition column-name="state" table-name="user" operator="EQUAL">
                    <value value="RUNNING" type="java.lang.String" />
                </condition>
            </condition-context>
        </condition-contexts>
    </assert>
    
    <assert id="assertInsertWithMultiAutoIncrementColumn" sql="insert into `payment`('state') values('RUNNING')" expected-sql="insert into [Token(payment)]('state', id, order_id) values('RUNNING', 1, 1)">
        <tables>
            <table name="payment" />
        </tables>
        <condition-contexts>
            <condition-context>
                <condition column-name="state" table-name="payment" operator="EQUAL">
                    <value value="RUNNING" type="java.lang.String" />
                </condition>
                <condition column-name="order_id" table-name="payment" operator="EQUAL">
                    <value value="1" type="java.lang.Integer" />
                </condition>
            </condition-context>
        </condition-contexts>
    </assert>
    
    <assert id="assertInsertNull" sql="insert into `order`('order_id','state') values(NULL,'')" expected-sql="insert into [Token(order)]('order_id','state') values(NULL,'')">
        <tables>
            <table name="order" />
        </tables>
        <condition-contexts>
            <condition-context>
                <condition column-name="order_id" table-name="order" operator="EQUAL">
                    <value value="" type="java.lang.String" />
                </condition>
                <condition column-name="state" table-name="order" operator="EQUAL">
                    <value value="" type="java.lang.String" />
                </condition>
            </condition-context>
        </condition-contexts>
    </assert>
    
    <!-- // TODO
    <assert id="assertInsertSelect" sql="INSERT INTO `order` ('order_id', 'state') (SELECT 1, 'RUNNING' FROM dual UNION ALL SELECT 2, 'RUNNING' FROM dual )" expected-sql="INSERT INTO [Token(order)] ('order_id', 'state') (SELECT 1, 'RUNNING' FROM dual UNION ALL SELECT 2, 'RUNNING' FROM dual )">
        <tables>
            <table name="order" />
        </tables>
        <condition-contexts>
           <condition-context/>
        </condition-contexts>
    </assert>
    -->
</asserts>
