/*
 * Copyright 1999-2015 dangdang.com.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * </p>
 */

package com.dangdang.ddframe.rdb.sharding.routing;

import com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule;
import com.dangdang.ddframe.rdb.sharding.api.rule.TableRule;
import com.dangdang.ddframe.rdb.sharding.parsing.parser.context.ConditionContext;
import com.dangdang.ddframe.rdb.sharding.parsing.parser.context.GeneratedKeyContext;
import com.dangdang.ddframe.rdb.sharding.parsing.parser.context.InsertSQLContext;
import com.dangdang.ddframe.rdb.sharding.parsing.parser.context.ShardingColumnContext;
import com.dangdang.ddframe.rdb.sharding.parsing.parser.expr.SQLExpr;
import com.dangdang.ddframe.rdb.sharding.parsing.parser.expr.SQLNumberExpr;
import com.dangdang.ddframe.rdb.sharding.parsing.parser.expr.SQLPlaceholderExpr;
import com.dangdang.ddframe.rdb.sharding.parsing.parser.token.AutoGeneratedKeysToken;
import com.dangdang.ddframe.rdb.sharding.parsing.parser.token.ItemsToken;
import com.dangdang.ddframe.rdb.sharding.parsing.parser.token.SQLToken;
import com.google.common.base.Optional;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * 自增主键工具类.
 *
 * @author zhangliang
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public final class GenerateKeysUtils {
    
    /**
     * 追加自增主键.
     *
     * @param shardingRule 分片规则
     * @param parameters 参数
     * @param insertSQLContext 解析结果
     */
    public static void appendGenerateKeys(final ShardingRule shardingRule, final List<Object> parameters, final InsertSQLContext insertSQLContext) {
        List<Number> generatedKeys = generateKeys(shardingRule, insertSQLContext);
        Optional<AutoGeneratedKeysToken> autoGeneratedKeysToken =  findAutoGeneratedKeysToken(insertSQLContext);
        if (!autoGeneratedKeysToken.isPresent()) {
            return;
        }
        String tableName = insertSQLContext.getTables().get(0).getName();
        List<String> autoGenerateKeyColumns = insertSQLContext.getGeneratedKeyContext().getColumns();
        ItemsToken valuesToken = new ItemsToken(autoGeneratedKeysToken.get().getBeginPosition());
        int offset = 0;
        int parametersSize = parameters.size();
        for (Number each : generatedKeys) {
            ShardingColumnContext shardingColumnContext = new ShardingColumnContext(autoGenerateKeyColumns.get(offset), tableName, true);
            if (parameters.isEmpty()) {
                valuesToken.getItems().add(each.toString());
                addCondition(shardingRule, insertSQLContext, shardingColumnContext, new SQLNumberExpr(each));
            } else {
                valuesToken.getItems().add("?");
                parameters.add(each);
                addCondition(shardingRule, insertSQLContext, shardingColumnContext, new SQLPlaceholderExpr(parametersSize + offset));
            }
            offset++;
        }
        insertSQLContext.getSqlTokens().remove(autoGeneratedKeysToken.get());
        insertSQLContext.getSqlTokens().add(valuesToken);
    }
    
    private static Optional<AutoGeneratedKeysToken> findAutoGeneratedKeysToken(final InsertSQLContext insertSQLContext) {
        for (SQLToken each : insertSQLContext.getSqlTokens()) {
            if (each instanceof AutoGeneratedKeysToken) {
                return Optional.of((AutoGeneratedKeysToken) each);
            }
        }
        return Optional.absent();
    }
    
    private static void addCondition(final ShardingRule shardingRule, final InsertSQLContext insertSQLContext, final ShardingColumnContext shardingColumnContext, final SQLExpr sqlExpr) {
        if (shardingRule.isShardingColumn(shardingColumnContext)) {
            insertSQLContext.getConditionContext().add(new ConditionContext.Condition(shardingColumnContext, sqlExpr));
        }
    }
    
    /**
     * 获取自增主键.
     * 
     * @param shardingRule 分片规则
     * @param insertSQLContext 解析结果
     * @return 自增主键集合
     */
    public static List<Number> generateKeys(final ShardingRule shardingRule, final InsertSQLContext insertSQLContext) {
        Optional<TableRule> tableRuleOptional = shardingRule.tryFindTableRule(insertSQLContext.getTables().iterator().next().getName());
        if (!tableRuleOptional.isPresent()) {
            return Collections.emptyList();
        }
        TableRule tableRule = tableRuleOptional.get();
        GeneratedKeyContext generatedKeyContext = insertSQLContext.getGeneratedKeyContext();
        List<Number> result = new ArrayList<>(generatedKeyContext.getColumns().size());
        for (String each : generatedKeyContext.getColumns()) {
            Number generatedId = tableRule.generateId(each);
            result.add(generatedId);
            generatedKeyContext.putValue(each, generatedId);
        }
        return result;
    }
}
