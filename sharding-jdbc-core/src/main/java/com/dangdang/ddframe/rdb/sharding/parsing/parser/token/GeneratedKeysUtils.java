package com.dangdang.ddframe.rdb.sharding.parsing.parser.token;

import com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule;
import com.dangdang.ddframe.rdb.sharding.parsing.parser.context.InsertSQLContext;
import com.dangdang.ddframe.rdb.sharding.parsing.parser.context.ShardingColumnContext;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;

import java.util.Collection;

/**
 * 自增主键工具类.
 *
 * @author zhangliang
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public final class GeneratedKeysUtils {
    
    /**
     * 追加自增主键.
     *
     * @param shardingRule 分片规则
     * @param insertSQLContext 解析结果
     */
    public static void appendGenerateKeys(final ShardingRule shardingRule, final InsertSQLContext insertSQLContext) {
        String tableName = insertSQLContext.getTables().get(0).getName();
        ItemsToken columnsToken = new ItemsToken(insertSQLContext.getColumnsListLastPosition());
        AutoGeneratedKeysToken autoGeneratedKeysToken = new AutoGeneratedKeysToken(insertSQLContext.getValuesListLastPosition());
        Collection<String> autoGeneratedKeyColumns = shardingRule.getAutoIncrementColumns(tableName);
        for (String each : autoGeneratedKeyColumns) {
            if (!isIncluded(insertSQLContext, each)) {
                columnsToken.getItems().add(each);
                insertSQLContext.getGeneratedKeyContext().getColumns().add(each);
            }
        }
        if (!columnsToken.getItems().isEmpty()) {
            insertSQLContext.getSqlTokens().add(columnsToken);
            insertSQLContext.getSqlTokens().add(autoGeneratedKeysToken);
        }
    }
    
    private static boolean isIncluded(final InsertSQLContext insertSQLContext, final String autoGeneratedKeyColumn) {
        for (ShardingColumnContext shardingColumnContext : insertSQLContext.getShardingColumnContexts()) {
            if (shardingColumnContext.getColumnName().equalsIgnoreCase(autoGeneratedKeyColumn)) {
                return true;
            }
        }
        return false;
    }
}
