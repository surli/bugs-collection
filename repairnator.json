{
  "totalNumberSkippingTests": 17,
  "bugType": "passing_passing",
  "totalNumberErroringTests": 0,
  "repo": "google/error-prone",
  "bugCommit": "https://github.com/google/error-prone/compare/dfa5b488e466...2005567fdcfa",
  "failingModule": "/root/workspace/google/error-prone/203045766/core",
  "hostname": "spirals-spoon3r",
  "totalNumberFailingTests": 20,
  "error-types": [
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 2046,
  "failing-test-cases": [
    {
      "className": "com.google.errorprone.bugpatterns.ClassCanBeStaticTest",
      "failingMethods": [
        "com.google.errorprone.bugpatterns.ClassCanBeStaticTest#nestedInAnonymous",
        "com.google.errorprone.bugpatterns.ClassCanBeStaticTest#nestedInLocal"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Saw unexpected error on line 4. All errors:\n[/A.java:4: warning: [ClassCanBeStatic] Inner class is non-static but does not reference enclosing class\n      class Inner {\n      ^\n    (see http://errorprone.info/bugpattern/ClassCanBeStatic)\n  Did you mean \u0027static class Inner {\u0027?]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Saw unexpected error on line 4. All errors:\n[/A.java:4: warning: [ClassCanBeStatic] Inner class is non-static but does not reference enclosing class\n      class Inner {\n      ^\n    (see http://errorprone.info/bugpattern/ClassCanBeStatic)\n  Did you mean \u0027static class Inner {\u0027?]",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.google.errorprone.bugpatterns.ClassNewInstanceTest",
      "failingMethods": [
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#mixedMulticatch",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#inCatchRepeated",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#catchAndThrows",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#existingRoeCase",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#additionalCatchClause",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#throwsException",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#withFinally",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#differentHandles",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#positiveUnion",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#freshVar",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#throwsIndividual",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#positiveROE",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#catchesDoesntThrow",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#throwsROE",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#positive",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#inCatch",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#mergeWhitespace",
        "com.google.errorprone.bugpatterns.ClassNewInstanceTest#overlap"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 2 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 7 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eRETURN-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 6 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eRETURN-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 9 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eCATCH-\u003eBLOCK(non-static)-\u003eRETURN-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 8 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eCATCH-\u003eBLOCK(non-static)-\u003eRETURN-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nimport java.lang.reflect.InvocationTargetException;\nclass Test {\n  Object f()\n      throws InstantiationException, IllegalAccessException, InvocationTargetException,\n          NoSuchMethodException {\n    try {\n      return getClass().getDeclaredConstructor().newInstance();\n    } catch (ReflectiveOperationException ex) {\n      return getClass().getDeclaredConstructor().newInstance();\n    }\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\nimport java.lang.reflect.InvocationTargetException;\nclass Test {\n  Object f() throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {\n    try {\n      return getClass().getConstructor().newInstance();\n    } catch (ReflectiveOperationException ex) {\n      return getClass().getConstructor().newInstance();\n    }\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 1 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 6 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 5 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nimport java.lang.reflect.InvocationTargetException;\nclass Test {\n  void f()\n      throws InstantiationException, IllegalAccessException, InvocationTargetException,\n          NoSuchMethodException {\n    getClass().getDeclaredConstructor().newInstance();\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\nimport java.lang.reflect.InvocationTargetException;\nclass Test {\n  void f() throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {\n    getClass().getConstructor().newInstance();\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 1 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() {\n    try {\n      getClass().getDeclaredConstructor().newInstance();\n    } catch (ReflectiveOperationException e0) {\n      e0.printStackTrace();\n    }\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() {\n    try {\n      getClass().getConstructor().newInstance();\n    } catch (ReflectiveOperationException e0) {\n      e0.printStackTrace();\n    }\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 1 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f(Exception e) {\n    try {\n      getClass().getDeclaredConstructor().newInstance();\n    } catch (InstantiationException e1) {\n      // one\n    } catch (IllegalAccessException e1) {\n      // two\n    } catch (ReflectiveOperationException e1) {\n      throw new LinkageError(e1.getMessage(), e1);\n    }\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f(Exception e) {\n    try {\n      getClass().getConstructor().newInstance();\n    } catch (InstantiationException e1) {\n      // one\n    } catch (IllegalAccessException e1) {\n      // two\n    }catch (ReflectiveOperationException e1) { throw new LinkageError(e1.getMessage(), e1); }\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 1 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() {\n    try {\n      getClass().getDeclaredConstructor().newInstance();\n    } catch (InstantiationException e) {\n      // InstantiationException\n    } catch (ReflectiveOperationException | NullPointerException e) {\n      throw new AssertionError(e);\n    }\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() {\n    try {\n      getClass().getConstructor().newInstance();\n    } catch (InstantiationException e) {\n      // InstantiationException\n    } catch (ReflectiveOperationException | NullPointerException e) {\n      throw new AssertionError(e);\n    }\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 1 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 3 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 3 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() throws ReflectiveOperationException {\n    getClass().getDeclaredConstructor().newInstance();\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() throws ReflectiveOperationException {\n    getClass().getConstructor().newInstance();\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 2 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 3 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 3 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 3 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getClass)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 3 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getClass)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() throws Exception {\n    getClass().getDeclaredConstructor().newInstance().getClass().getDeclaredConstructor().newInstance();\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() throws Exception {\n    getClass().getConstructor().newInstance().getClass().getConstructor().newInstance();\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 1 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eRETURN-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eRETURN-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  Object f() {\n    try {\n      return getClass().getDeclaredConstructor().newInstance();\n    } catch (ReflectiveOperationException ex) {\n      // Suppress exception.\n    } catch (ExceptionInInitializerError ex) {\n      // Suppress exception.\n    } catch (SecurityException ex) {\n      // Suppress exception.\n    }\n    return null;\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  Object f() {\n    try {\n      return getClass().getConstructor().newInstance();\n    } catch (ReflectiveOperationException ex) {\n      // Suppress exception.\n    }  catch (ExceptionInInitializerError ex) {\n      // Suppress exception.\n    } catch (SecurityException ex) {\n      // Suppress exception.\n    }\n    return null;\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 1 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 3 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 3 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() throws Exception {\n    getClass().getDeclaredConstructor().newInstance();\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() throws Exception {\n    getClass().getConstructor().newInstance();\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 1 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() {\n    try {\n      getClass().getDeclaredConstructor().newInstance();\n    } catch (ReflectiveOperationException e) {\n      // uh oh\n    }\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() {\n    try {\n      getClass().getConstructor().newInstance();\n    } catch (ReflectiveOperationException e) {\n      // uh oh\n    } \n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 1 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() {\n    try {\n      getClass().getDeclaredConstructor().newInstance();\n    } catch (ReflectiveOperationException e) {\n      e.printStackTrace();\n    }\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() {\n    try {\n      getClass().getConstructor().newInstance();\n    } catch (ReflectiveOperationException e) {\n      e.printStackTrace();\n    }\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 1 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() throws Exception {\n    try {\n      getClass().getDeclaredConstructor().newInstance();\n    } finally {}\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() throws Exception {\n    try {\n      getClass().getConstructor().newInstance();\n    } finally {}\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 1 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 5 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 5 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nimport java.io.IOException;\nclass Test {\n  void f() throws IOException {\n    try {\n      getClass().getDeclaredConstructor().newInstance();\n    } catch (ReflectiveOperationException e) {}\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nimport java.io.IOException;\nclass Test {\n  void f() throws IOException {\n    try {\n      getClass().getConstructor().newInstance();\n    } catch (ReflectiveOperationException e) {}\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 1 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() {\n    try {\n      getClass().getDeclaredConstructor().newInstance();\n    } catch (InstantiationException e1) {\n      e1.printStackTrace();\n    } catch (IllegalAccessException e2) {\n      e2.printStackTrace();\n    } catch (ReflectiveOperationException e2) {\n      throw new LinkageError(e2.getMessage(), e2);\n    }\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() {\n    try {\n      getClass().getConstructor().newInstance();\n    } catch (InstantiationException e1) {\n      e1.printStackTrace();\n    } catch (IllegalAccessException e2) {\n      e2.printStackTrace();\n    }catch (ReflectiveOperationException e2) { throw new LinkageError(e2.getMessage(), e2); }\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 1 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() {\n    try {\n      getClass().getDeclaredConstructor().newInstance();\n    } catch (ReflectiveOperationException e) {\n      e.printStackTrace();\n    }\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() {\n    try {\n      getClass().getConstructor().newInstance();\n    } catch (ReflectiveOperationException e) {\n      e.printStackTrace();\n    } \n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 3 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 7 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 6 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 9 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eCATCH-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 8 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eCATCH-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 11 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eCATCH-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 10 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eCATCH-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nimport java.lang.reflect.InvocationTargetException;\nclass Test {\n  void f()\n      throws InstantiationException, IllegalAccessException, InvocationTargetException,\n          NoSuchMethodException {\n    try {\n      getClass().getDeclaredConstructor().newInstance();\n    } catch (InstantiationException e) {\n      getClass().getDeclaredConstructor().newInstance();\n    } catch (ReflectiveOperationException e) {\n      getClass().getDeclaredConstructor().newInstance();\n    }\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\nimport java.lang.reflect.InvocationTargetException;\nclass Test {\n  void f() throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {\n    try {\n      getClass().getConstructor().newInstance();\n    } catch (InstantiationException e) {\n      getClass().getConstructor().newInstance();\n    } catch (ReflectiveOperationException e) {\n      getClass().getConstructor().newInstance();\n    }\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 2 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 6 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eCATCH-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 6 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eCATCH-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() throws Exception {\n    try {\n      getClass().getDeclaredConstructor().newInstance();\n    } catch (ReflectiveOperationException e) {\n      getClass().getDeclaredConstructor().newInstance();\n    }\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() throws Exception {\n    try {\n      getClass().getConstructor().newInstance();\n    } catch (ReflectiveOperationException e) {\n      getClass().getConstructor().newInstance();\n    }\n  }\n}",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/Test.java\u003e\nActual file: \u003cTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 1 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getDeclaredConstructor)\n  Actual node: Line 4 COMPILATION_UNIT-\u003eCLASS(Test)-\u003eMETHOD(f)-\u003eBLOCK(non-static)-\u003eTRY-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(newInstance)-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(getConstructor)\n  Expected member identifier to be \u003cgetDeclaredConstructor\u003e but was \u003cgetConstructor\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() {\n    try {\n      getClass().getDeclaredConstructor().newInstance();\n    } catch (InstantiationException e) {\n    } catch (ReflectiveOperationException e) {\n      // ¯\\_(ツ)_/¯\n    }\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nclass Test {\n  void f() {\n    try {\n      getClass().getConstructor().newInstance();\n    } catch (InstantiationException e) {\n    } catch (ReflectiveOperationException e) {\n      // ¯\\_(ツ)_/¯\n    }\n  }\n}",
          "isError": false
        }
      ],
      "nbFailures": 18,
      "nbErrors": 0
    }
  ]
}