{
  "totalNumberSkippingTests": 17,
  "bugType": "passing_passing",
  "totalNumberErroringTests": 0,
  "repo": "google/error-prone",
  "metrics": {
    "FailureNames": [
      "java.lang.AssertionError"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuildSourceCode": 0,
      "ComputeClasspath": 2,
      "ComputeTestDir": 0,
      "GatherTestInformationPreviousBuildSourceCode": 0,
      "ResolveDependency": 11,
      "BuildProjectBuild": 17,
      "BuildProjectPreviousBuildSourceCode": 26,
      "TestProjectBuild": 553,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 7,
      "TestProjectPreviousBuildSourceCode": 405,
      "GatherTestInformationBuild": 0,
      "CloneRepository": 36,
      "CheckoutPatchedBuild": 0,
      "NopolRepair": 34,
      "PushIncriminatedBuild": 5,
      "CommitPatch": 6
    },
    "NbFailingTests": 2,
    "BugCommitUrl": "http://github.com/google/error-prone/commit/a230574140914bfc2f1b2c996b7881b6f7440dc9",
    "PatchCommitUrl": "http://github.com/google/error-prone/commit/131b0d67865e4af6bea0206dbf10af12b37c091b",
    "ReproductionDate": "May 15, 2017 1:22:59 PM",
    "BuggyBuildId": 201725327,
    "PatchedBuilId": 202363212,
    "BuggyBuildURL": "http://travis-ci.org/google/error-prone/builds/201725327",
    "PatchedBuildURL": "http://travis-ci.org/google/error-prone/builds/202363212",
    "BuggyBuildDate": "Feb 15, 2017 2:41:43 AM",
    "PatchedBuildDate": "Feb 16, 2017 9:41:29 PM",
    "BugCommit": "a230574140914bfc2f1b2c996b7881b6f7440dc9",
    "PatchCommit": "131b0d67865e4af6bea0206dbf10af12b37c091b",
    "PatchChangedFiles": 12,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 1999,
    "NbLibraries": 52,
    "NbFileApp": 1036,
    "NbFileTests": 1440,
    "NbCPU": 56,
    "FreeMemory": 2334509360,
    "TotalMemory": 3811573760,
    "AngelicValuesByTest": {
      "com/google/errorprone/bugpatterns/ExpectedExceptionCheckerTest": 0,
      "com/google/errorprone/bugpatterns/TypeParameterUnusedInFormalsTest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuildSourceCode": 1133261928,
      "ComputeClasspath": 1408357280,
      "ComputeTestDir": 1171008176,
      "GatherTestInformationPreviousBuildSourceCode": 989936576,
      "ResolveDependency": 1112666712,
      "BuildProjectBuild": 2998158416,
      "BuildProjectPreviousBuildSourceCode": 1096320088,
      "TestProjectBuild": 2976588432,
      "ComputeSourceDir": 1183601048,
      "InitRepoToPush": 1412625008,
      "TestProjectPreviousBuildSourceCode": 1040741880,
      "GatherTestInformationBuild": 2959607672,
      "CloneRepository": 1237676024,
      "CheckoutPatchedBuild": 3010227648,
      "NopolRepair": 3114800528,
      "PushIncriminatedBuild": 2515979296,
      "CommitPatch": 2334509360
    }
  },
  "bugCommit": "https://github.com/google/error-prone/compare/6708696e4450...a23057414091",
  "failingModule": "/root/workspace/google/error-prone/201725327/core",
  "hostname": "spirals-spoon3r",
  "totalNumberFailingTests": 2,
  "error-types": [
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 1999,
  "failing-test-cases": [
    {
      "className": "com.google.errorprone.bugpatterns.TypeParameterUnusedInFormalsTest",
      "failingMethods": [
        "com.google.errorprone.bugpatterns.TypeParameterUnusedInFormalsTest#typeAnnotation"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Saw unexpected error on line 2. All errors:\n[/Test.java:2: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.\n  \u003cT\u003e T f(@A T x) {\n        ^\n    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.google.errorprone.bugpatterns.ExpectedExceptionCheckerTest",
      "failingMethods": [
        "com.google.errorprone.bugpatterns.ExpectedExceptionCheckerTest#isA_hasCauseThat"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nSource declared the same top-level types of an expected source, but\ndidn\u0027t match exactly.\n\nExpected file: \u003c/out/ExceptionTest.java\u003e\nActual file: \u003cExceptionTest.java\u003e\n\nDiffs:\n\u003d\u003d\u003d\u003d\u003d\u003d\n\nFound 2 unmatched nodes in the actual tree. \n\n\u003e Extra node in actual tree.\n  Line 10 COMPILATION_UNIT-\u003eIMPORT(non-static)\n  Node contents: \u003cimport org.junit.rules.ExpectedException;\u003e.\n  \n\n\u003e Extra node in actual tree.\n  Line 16 COMPILATION_UNIT-\u003eCLASS(ExceptionTest)-\u003eMETHOD(test)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMETHOD_INVOCATION\n  Node contents: \u003cCoreMatchers.isA(IOException.class)\u003e.\n  \n\nFound 21 nodes that differed in expected and actual trees. \n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 2 COMPILATION_UNIT-\u003eIMPORT(static)-\u003eMEMBER_SELECT(expectThrows)\n  Actual node: Line 2 COMPILATION_UNIT-\u003eIMPORT(static)-\u003eMEMBER_SELECT(assertThat)\n  Expected member identifier to be \u003cexpectThrows\u003e but was \u003cassertThat\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 2 COMPILATION_UNIT-\u003eIMPORT(static)-\u003eMEMBER_SELECT(expectThrows)-\u003eMEMBER_SELECT(Assert)\n  Actual node: Line 2 COMPILATION_UNIT-\u003eIMPORT(static)-\u003eMEMBER_SELECT(assertThat)-\u003eMEMBER_SELECT(MatcherAssert)\n  Expected member identifier to be \u003cAssert\u003e but was \u003cMatcherAssert\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 2 COMPILATION_UNIT-\u003eIMPORT(static)-\u003eMEMBER_SELECT(expectThrows)-\u003eMEMBER_SELECT(Assert)-\u003eMEMBER_SELECT(junit)\n  Actual node: Line 2 COMPILATION_UNIT-\u003eIMPORT(static)-\u003eMEMBER_SELECT(assertThat)-\u003eMEMBER_SELECT(MatcherAssert)-\u003eMEMBER_SELECT(hamcrest)\n  Expected member identifier to be \u003cjunit\u003e but was \u003chamcrest\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eIMPORT(non-static)\n  Actual node: Line 3 COMPILATION_UNIT-\u003eIMPORT(static)\n  Expected import to be \u003cnon-static\u003e but was \u003cstatic\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(IOException)\n  Actual node: Line 3 COMPILATION_UNIT-\u003eIMPORT(static)-\u003eMEMBER_SELECT(expectThrows)\n  Expected member identifier to be \u003cIOException\u003e but was \u003cexpectThrows\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(IOException)-\u003eMEMBER_SELECT(io)\n  Actual node: Line 3 COMPILATION_UNIT-\u003eIMPORT(static)-\u003eMEMBER_SELECT(expectThrows)-\u003eMEMBER_SELECT(Assert)\n  Expected member identifier to be \u003cio\u003e but was \u003cAssert\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 4 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(IOException)-\u003eMEMBER_SELECT(io)-\u003eIDENTIFIER(java)-\u003eIDENTIFIER(java)\n  Actual node: Line 3 COMPILATION_UNIT-\u003eIMPORT(static)-\u003eMEMBER_SELECT(expectThrows)-\u003eMEMBER_SELECT(Assert)-\u003eMEMBER_SELECT(junit)-\u003eMEMBER_SELECT(junit)\n  Expected node kind to be \u003cIDENTIFIER\u003e but was \u003cMEMBER_SELECT\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 5 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(*)\n  Actual node: Line 5 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(IOException)\n  Expected member identifier to be \u003c*\u003e but was \u003cIOException\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 5 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(*)-\u003eMEMBER_SELECT(file)\n  Actual node: Line 5 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(IOException)-\u003eMEMBER_SELECT(io)\n  Expected member identifier to be \u003cfile\u003e but was \u003cio\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 5 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(*)-\u003eMEMBER_SELECT(file)-\u003eMEMBER_SELECT(nio)-\u003eMEMBER_SELECT(nio)\n  Actual node: Line 5 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(IOException)-\u003eMEMBER_SELECT(io)-\u003eIDENTIFIER(java)-\u003eIDENTIFIER(java)\n  Expected node kind to be \u003cMEMBER_SELECT\u003e but was \u003cIDENTIFIER\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 6 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(CoreMatchers)\n  Actual node: Line 6 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(*)\n  Expected member identifier to be \u003cCoreMatchers\u003e but was \u003c*\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 6 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(CoreMatchers)-\u003eMEMBER_SELECT(hamcrest)\n  Actual node: Line 6 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(*)-\u003eMEMBER_SELECT(file)\n  Expected member identifier to be \u003chamcrest\u003e but was \u003cfile\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 6 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(CoreMatchers)-\u003eMEMBER_SELECT(hamcrest)-\u003eIDENTIFIER(org)-\u003eIDENTIFIER(org)\n  Actual node: Line 6 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(*)-\u003eMEMBER_SELECT(file)-\u003eMEMBER_SELECT(nio)-\u003eMEMBER_SELECT(nio)\n  Expected node kind to be \u003cIDENTIFIER\u003e but was \u003cMEMBER_SELECT\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 7 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(Rule)\n  Actual node: Line 7 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(CoreMatchers)\n  Expected member identifier to be \u003cRule\u003e but was \u003cCoreMatchers\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 7 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(Rule)-\u003eMEMBER_SELECT(junit)\n  Actual node: Line 7 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(CoreMatchers)-\u003eMEMBER_SELECT(hamcrest)\n  Expected member identifier to be \u003cjunit\u003e but was \u003chamcrest\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 8 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(Test)\n  Actual node: Line 8 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(Rule)\n  Expected member identifier to be \u003cTest\u003e but was \u003cRule\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 9 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(ExpectedException)\n  Actual node: Line 9 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(Test)\n  Expected member identifier to be \u003cExpectedException\u003e but was \u003cTest\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 9 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(ExpectedException)-\u003eMEMBER_SELECT(rules)\n  Actual node: Line 9 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(Test)-\u003eMEMBER_SELECT(junit)\n  Expected member identifier to be \u003crules\u003e but was \u003cjunit\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 9 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(ExpectedException)-\u003eMEMBER_SELECT(rules)-\u003eMEMBER_SELECT(junit)-\u003eMEMBER_SELECT(junit)\n  Actual node: Line 9 COMPILATION_UNIT-\u003eIMPORT(non-static)-\u003eMEMBER_SELECT(Test)-\u003eMEMBER_SELECT(junit)-\u003eIDENTIFIER(org)-\u003eIDENTIFIER(org)\n  Expected node kind to be \u003cMEMBER_SELECT\u003e but was \u003cIDENTIFIER\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 17 COMPILATION_UNIT-\u003eCLASS(ExceptionTest)-\u003eMETHOD(test)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(isInstanceOf)-\u003eMEMBER_SELECT(isInstanceOf)\n  Actual node: Line 16 COMPILATION_UNIT-\u003eCLASS(ExceptionTest)-\u003eMETHOD(test)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eIDENTIFIER(assertThat)-\u003eIDENTIFIER(assertThat)\n  Expected node kind to be \u003cMEMBER_SELECT\u003e but was \u003cIDENTIFIER\u003e.\n\n\u003e Difference in expected tree and actual tree.\n  Expected node: Line 17 COMPILATION_UNIT-\u003eCLASS(ExceptionTest)-\u003eMETHOD(test)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMEMBER_SELECT(class)-\u003eMEMBER_SELECT(class)\n  Actual node: Line 16 COMPILATION_UNIT-\u003eCLASS(ExceptionTest)-\u003eMETHOD(test)-\u003eBLOCK(non-static)-\u003eEXPRESSION_STATEMENT-\u003eMETHOD_INVOCATION-\u003eMETHOD_INVOCATION-\u003eMETHOD_INVOCATION\n  Expected node kind to be \u003cMEMBER_SELECT\u003e but was \u003cMETHOD_INVOCATION\u003e.\n\n\nExpected Source: \n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static org.junit.Assert.expectThrows;\n\nimport java.io.IOException;\nimport java.nio.file.*;\nimport org.hamcrest.CoreMatchers;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nclass ExceptionTest {\n  @Rule ExpectedException thrown \u003d ExpectedException.none();\n  @Test\n  public void test() throws Exception {\n    Path p \u003d Paths.get(\"NOSUCH\");\n    IOException thrown \u003d\n        expectThrows(IOException.class, () -\u003e Files.readAllBytes(p));\n    assertThat(thrown).hasCauseThat().isInstanceOf(IOException.class);\n    assertThat(Files.exists(p)).isFalse();\n  }\n}\n\nActual Source:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.junit.Assert.expectThrows;\n\nimport java.io.IOException;\nimport java.nio.file.*;\nimport org.hamcrest.CoreMatchers;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nclass ExceptionTest {\n  @Rule ExpectedException thrown \u003d ExpectedException.none();\n  @Test\n  public void test() throws Exception {\n    Path p \u003d Paths.get(\"NOSUCH\");\n    IOException thrown \u003d expectThrows(IOException.class, () -\u003e Files.readAllBytes(p));assertThat(thrown.getCause(), CoreMatchers.isA(IOException.class));\n    assertThat(Files.exists(p)).isFalse();\n  }\n}",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}