-----------------------------------com.gen.test.SampleUnitClient.java-----------------------------------

package com.gen.test;

import java.util.List;
import org.springframework.http.ResponseEntity;


/**
 * A collection of samples
 * (Generated with springmvc-raml-parser v.${project.version})
 * 
 */
public interface SampleUnitClient {


    /**
     * Retrieves  samples
     * 
     */
    public ResponseEntity<List<com.gen.test.model.SampleUnit>> getSampleUnits();

    /**
     * Creates a sample unit
     * 
     * @param sampleUnit The Request Body Payload
     */
    public ResponseEntity<?> createSampleUnit(com.gen.test.model.SampleUnit sampleUnit);

}
-----------------------------------com.gen.test.SampleUnitClientImpl.java-----------------------------------

package com.gen.test;

import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;


/**
 * A collection of samples
 * (Generated with springmvc-raml-parser v.${project.version})
 * 
 */
@Component
public class SampleUnitClientImpl
    implements SampleUnitClient
{

    @Autowired
    private RestTemplate restTemplate;
    @Value("${client.url}")
    private String baseUrl;

    /**
     * Retrieves  samples
     * 
     */
    public ResponseEntity<List<com.gen.test.model.SampleUnit>> getSampleUnits() {
        HttpHeaders httpHeaders = new HttpHeaders();
        //  Add Accepts Headers and Body Content-Type
        ArrayList<MediaType> acceptsList = new ArrayList<MediaType>();
        acceptsList.add(MediaType.valueOf("application/json"));
        httpHeaders.setAccept(acceptsList);
        String url = baseUrl.concat("/sample_units");
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);
        UriComponents uriComponents = builder.build();
        HttpEntity httpEntity = new HttpEntity(httpHeaders);
        class _P extends org.springframework.core.ParameterizedTypeReference<java.util.List<com.gen.test.model.SampleUnit>>{};
        ParameterizedTypeReference<List<com.gen.test.model.SampleUnit>> typeReference = new _P();
        return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, typeReference);
    }

    /**
     * Creates a sample unit
     * 
     */
    public ResponseEntity<?> createSampleUnit(com.gen.test.model.SampleUnit sampleUnit) {
        HttpHeaders httpHeaders = new HttpHeaders();
        //  Add Accepts Headers and Body Content-Type
        ArrayList<MediaType> acceptsList = new ArrayList<MediaType>();
        httpHeaders.setContentType(MediaType.valueOf("application/json"));
        acceptsList.add(MediaType.valueOf("application/json"));
        httpHeaders.setAccept(acceptsList);
        String url = baseUrl.concat("/sample_units");
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url);
        UriComponents uriComponents = builder.build();
        HttpEntity httpEntity = new HttpEntity(sampleUnit, httpHeaders);
        return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.POST, httpEntity, Object.class);
    }

}
