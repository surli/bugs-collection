[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Spring MVC to RAML Synchronizer
[INFO] Spring MVC to RAML Synchronizer Annotations
[INFO] Spring MVC to RAML Synchronizer Parser
[INFO] Spring MVC to RAML Synchronizer Maven Plugin
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spring MVC to RAML Synchronizer 0.10.2
[INFO] ------------------------------------------------------------------------
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spring MVC to RAML Synchronizer Annotations 0.10.2
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ springmvc-raml-annotations ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/phoenixnap/springmvc-raml-plugin/213347211/springmvc-raml-annotations/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.3:compile (default-compile) @ springmvc-raml-annotations ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ springmvc-raml-annotations ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/phoenixnap/springmvc-raml-plugin/213347211/springmvc-raml-annotations/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.3:testCompile (default-testCompile) @ springmvc-raml-annotations ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ springmvc-raml-annotations ---
[INFO] No tests to run.
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spring MVC to RAML Synchronizer Parser 0.10.2
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ springmvc-raml-parser ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.3:compile (default-compile) @ springmvc-raml-parser ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ springmvc-raml-parser ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 87 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.3:testCompile (default-testCompile) @ springmvc-raml-parser ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ springmvc-raml-parser ---
[INFO] Surefire report directory: /root/workspace/phoenixnap/springmvc-raml-plugin/213347211/springmvc-raml-parser/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.phoenixnap.oss.ramlapisync.raml.rjp.raml10v2.RJP10V2RamlRootTest
Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.754 sec
Running com.phoenixnap.oss.ramlapisync.raml.rjp.raml10v2.RJP10V2RamlActionTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.145 sec
Running com.phoenixnap.oss.ramlapisync.raml.interpreters.RamlEquivalenceTest
2017-05-10 15:43:04 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /{managerId} against /{managerId}
2017-05-10 15:43:04 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:04 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-05-10 15:43:04 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:04 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:04 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:04 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:04 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:04 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:04 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /office against /office
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /{nestedId} against /{nestedId}
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /office against /office
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /{nestedId} against /{nestedId}
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /managers against /managers
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /{managerId} against /{managerId}
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /office against /office
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /{nestedId} against /{nestedId}
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-05-10 15:43:05 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources are null
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.504 sec
Running com.phoenixnap.oss.ramlapisync.raml.interpreters.RamlInterpreterTest
2017-05-10 15:43:05 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter ObjectTypeInterpreter for type ObjectTypeDeclaration
2017-05-10 15:43:05 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter BooleanTypeInterpreter for type BooleanTypeDeclaration
2017-05-10 15:43:05 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter NullTypeInterpreter for type NullTypeDeclaration
2017-05-10 15:43:05 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter NumberTypeInterpreter for type NumberTypeDeclaration
2017-05-10 15:43:05 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter ArrayTypeInterpreter for type ArrayTypeDeclaration
2017-05-10 15:43:05 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter AnyTypeInterpreter for type AnyTypeDeclaration
2017-05-10 15:43:05 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter StringTypeInterpreter for type StringTypeDeclaration
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
-----------------------------------com.gen.foo.AnEnum.java-----------------------------------

package com.gen.foo;


public enum AnEnum {

    blue,
    red,
    green;

}
-----------------------------------com.gen.foo.EnumChecks.java-----------------------------------

package com.gen.foo;


public enum EnumChecks {

    one,
    two,
    three;

}
-----------------------------------com.gen.foo.Validation.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import java.util.List;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = -8962912969442610677L;
    private String firstname;
    @NotNull
    private String lastname;
    @NotNull
    @Pattern(regexp = "[0-9|-]+")
    private String pattern;
    @NotNull
    @Size(min = 1, max = 3)
    private String length;
    @Size(min = 5)
    private String minLength;
    @NotNull
    @DecimalMin("1.0")
    @DecimalMax("42.3")
    private Long id;
    @NotNull
    private AnEnum anEnum;
    @NotNull
    private EnumChecks anotherEnum;
    @NotNull
    private List<Object> testDefArray;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, List<Object> testDefArray) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.testDefArray = testDefArray;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(java.lang.Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Validation) == false) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

}

2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: childList to NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Manager
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.ClearanceLevel
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
-----------------------------------com.gen.test.model.AnEnum.java-----------------------------------

package com.gen.test.model;


public enum AnEnum {

    blue,
    red,
    green;

}
-----------------------------------com.gen.test.model.ClearanceLevel.java-----------------------------------

package com.gen.test.model;


public enum ClearanceLevel {

    low,
    high;

}
-----------------------------------com.gen.test.model.EnumChecks.java-----------------------------------

package com.gen.test.model;


public enum EnumChecks {

    one,
    two,
    three;

}
-----------------------------------com.gen.test.model.Manager.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import com.gen.foo.Department;
import com.gen.foo.Person;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Manager
    extends Person
    implements Serializable
{

    final static long serialVersionUID = -3384127177490668396L;
    private Department department;
    private ClearanceLevel clearanceLevel;

    /**
     * Creates a new Manager.
     * 
     */
    public Manager() {
        super();
    }

    /**
     * Creates a new Manager.
     * 
     */
    public Manager(String firstname, String lastname, Long id, Department department, ClearanceLevel clearanceLevel) {
        super(firstname, lastname, id);
        this.department = department;
        this.clearanceLevel = clearanceLevel;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Manager) == false) {
            return false;
        }
        Manager otherObject = ((Manager) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the department.
     * 
     * @return
     *     department
     */
    public Department getDepartment() {
        return department;
    }

    /**
     * Set the department.
     * 
     * @param department
     *     the new department
     */
    public void setDepartment(Department department) {
        this.department = department;
    }

    /**
     * Returns the clearanceLevel.
     * 
     * @return
     *     clearanceLevel
     */
    public ClearanceLevel getClearanceLevel() {
        return clearanceLevel;
    }

    /**
     * Set the clearanceLevel.
     * 
     * @param clearanceLevel
     *     the new clearanceLevel
     */
    public void setClearanceLevel(ClearanceLevel clearanceLevel) {
        this.clearanceLevel = clearanceLevel;
    }

}
-----------------------------------com.gen.test.model.Validation.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = -3329595205570288395L;
    private String firstname;
    private String lastname;
    private String pattern;
    private String length;
    private String minLength;
    private Long id;
    private AnEnum anEnum;
    private EnumChecks anotherEnum;
    private List<Object> testDefArray;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, List<Object> testDefArray) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.testDefArray = testDefArray;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(java.lang.Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Validation) == false) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

}
-----------------------------------com.gen.test.ManagerController.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import com.gen.test.model.Manager;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface ManagerController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Person> getManagers();

    /**
     * No description
     * 
     */
    public ResponseEntity<?> createManager(Manager manager);

    /**
     * No description
     * 
     */
    public ResponseEntity<?> deleteManagers();

}
-----------------------------------com.gen.test.ManagerControllerDecorator.java-----------------------------------

package com.gen.test;

import javax.validation.Valid;
import com.gen.foo.Person;
import com.gen.test.model.Manager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/managers", produces = "application/json")
public class ManagerControllerDecorator
    implements ManagerController
{

    @Autowired
    private ManagerController managerControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Person> getManagers() {
        return this.managerControllerDelegate.getManagers();
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<?> createManager(
        @Valid
        @RequestBody
        Manager manager) {
        return this.managerControllerDelegate.createManager(manager);
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteManagers() {
        return this.managerControllerDelegate.deleteManagers();
    }

}
-----------------------------------com.gen.test.NestedArrayPersonController.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface NestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Person> getNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedArrayPersons", produces = "application/json")
public class NestedArrayPersonControllerDecorator
    implements NestedArrayPersonController
{

    @Autowired
    private NestedArrayPersonController nestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Person> getNestedArrayPersons() {
        return this.nestedArrayPersonControllerDelegate.getNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.NestedNestedArrayPersonController.java-----------------------------------

package com.gen.test;

import com.gen.foo.NestedArrayPerson;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface NestedNestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<NestedArrayPerson> getNestedNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedNestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.foo.NestedArrayPerson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedNestedArrayPersons", produces = "application/json")
public class NestedNestedArrayPersonControllerDecorator
    implements NestedNestedArrayPersonController
{

    @Autowired
    private NestedNestedArrayPersonController nestedNestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<NestedArrayPerson> getNestedNestedArrayPersons() {
        return this.nestedNestedArrayPersonControllerDelegate.getNestedNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.PersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.foo.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface PersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Person>> getPersons();

}
-----------------------------------com.gen.test.PersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.foo.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/persons", produces = "application/json")
public class PersonControllerDecorator
    implements PersonController
{

    @Autowired
    private PersonController personControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Person>> getPersons() {
        return this.personControllerDelegate.getPersons();
    }

}
-----------------------------------com.gen.test.PersonListController.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface PersonListController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Person> getPersonLists();

}
-----------------------------------com.gen.test.PersonListControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/personLists", produces = "application/json")
public class PersonListControllerDecorator
    implements PersonListController
{

    @Autowired
    private PersonListController personListControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Person> getPersonLists() {
        return this.personListControllerDelegate.getPersonLists();
    }

}
-----------------------------------com.gen.test.ValidationController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface ValidationController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Validation> getValidations();

}
-----------------------------------com.gen.test.ValidationControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/validations", produces = "application/json")
public class ValidationControllerDecorator
    implements ValidationController
{

    @Autowired
    private ValidationController validationControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Validation> getValidations() {
        return this.validationControllerDelegate.getValidations();
    }

}
-----------------------------------com.gen.foo.Department.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = -8708430442404105263L;
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Department) == false) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

}
-----------------------------------com.gen.foo.NestedArrayPerson.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedArrayPerson
    extends Person
    implements Serializable
{

    final static long serialVersionUID = -8728260249594249392L;
    private List<Department> departmentList;

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList) {
        super(firstname, lastname, id);
        this.departmentList = departmentList;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof NestedArrayPerson) == false) {
            return false;
        }
        NestedArrayPerson otherObject = ((NestedArrayPerson) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the departmentList.
     * 
     * @return
     *     departmentList
     */
    public List<Department> getDepartmentList() {
        return departmentList;
    }

    /**
     * Set the departmentList.
     * 
     * @param departmentList
     *     the new departmentList
     */
    public void setDepartmentList(List<Department> departmentList) {
        this.departmentList = departmentList;
    }

}
-----------------------------------com.gen.foo.NestedNestedArrayPerson.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedNestedArrayPerson
    extends NestedArrayPerson
    implements Serializable
{

    final static long serialVersionUID = -8729912732810933520L;
    private List<Person> childList;

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList, List<Person> childList) {
        super(firstname, lastname, id, departmentList);
        this.childList = childList;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof NestedNestedArrayPerson) == false) {
            return false;
        }
        NestedNestedArrayPerson otherObject = ((NestedNestedArrayPerson) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the childList.
     * 
     * @return
     *     childList
     */
    public List<Person> getChildList() {
        return childList;
    }

    /**
     * Set the childList.
     * 
     * @param childList
     *     the new childList
     */
    public void setChildList(List<Person> childList) {
        this.childList = childList;
    }

}
-----------------------------------com.gen.foo.Person.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = -8690253118430645263L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Person) == false) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

}

2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
-----------------------------------com.gen.foo.AnEnum.java-----------------------------------

package com.gen.foo;


public enum AnEnum {

    blue,
    red,
    green;

}
-----------------------------------com.gen.foo.EnumChecks.java-----------------------------------

package com.gen.foo;


public enum EnumChecks {

    one,
    two,
    three;

}
-----------------------------------com.gen.foo.Validation.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import java.util.List;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = -3114772292912071237L;
    private String firstname;
    @NotNull
    private String lastname;
    @NotNull
    @Pattern(regexp = "[0-9|-]+")
    private String pattern;
    @NotNull
    @Size(min = 1, max = 3)
    private String length;
    @Size(min = 5)
    private String minLength;
    @NotNull
    @DecimalMin("1.0")
    @DecimalMax("42.3")
    private Long id;
    @NotNull
    private AnEnum anEnum;
    @NotNull
    private EnumChecks anotherEnum;
    @NotNull
    private List<Object> testDefArray;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, List<Object> testDefArray) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.testDefArray = testDefArray;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(java.lang.Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Validation) == false) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

}

2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Manager
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.ClearanceLevel
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: childList to NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Manager
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.ClearanceLevel
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-05-10 15:43:05 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedNestedArrayPerson
2017-05-10 15:43:05 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:05 DEBUG [pojo.PojoBuilder] - Adding field: childList to NestedNestedArrayPerson
-----------------------------------com.gen.test.model.AnEnum.java-----------------------------------

package com.gen.test.model;


public enum AnEnum {

    blue,
    red,
    green;

}
-----------------------------------com.gen.test.model.ClearanceLevel.java-----------------------------------

package com.gen.test.model;


public enum ClearanceLevel {

    low,
    high;

}
-----------------------------------com.gen.test.model.Department.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = -2764445700651180733L;
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Department) == false) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

}
-----------------------------------com.gen.test.model.EnumChecks.java-----------------------------------

package com.gen.test.model;


public enum EnumChecks {

    one,
    two,
    three;

}
-----------------------------------com.gen.test.model.Manager.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import com.gen.foo.Person;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Manager
    extends Person
    implements Serializable
{

    final static long serialVersionUID = -2790885440708061373L;
    private Department department;
    private ClearanceLevel clearanceLevel;

    /**
     * Creates a new Manager.
     * 
     */
    public Manager() {
        super();
    }

    /**
     * Creates a new Manager.
     * 
     */
    public Manager(String firstname, String lastname, Long id, Department department, ClearanceLevel clearanceLevel) {
        super(firstname, lastname, id);
        this.department = department;
        this.clearanceLevel = clearanceLevel;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Manager) == false) {
            return false;
        }
        Manager otherObject = ((Manager) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the department.
     * 
     * @return
     *     department
     */
    public Department getDepartment() {
        return department;
    }

    /**
     * Set the department.
     * 
     * @param department
     *     the new department
     */
    public void setDepartment(Department department) {
        this.department = department;
    }

    /**
     * Returns the clearanceLevel.
     * 
     * @return
     *     clearanceLevel
     */
    public ClearanceLevel getClearanceLevel() {
        return clearanceLevel;
    }

    /**
     * Set the clearanceLevel.
     * 
     * @param clearanceLevel
     *     the new clearanceLevel
     */
    public void setClearanceLevel(ClearanceLevel clearanceLevel) {
        this.clearanceLevel = clearanceLevel;
    }

}
-----------------------------------com.gen.test.model.NestedArrayPerson.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.List;
import com.gen.foo.Person;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedArrayPerson
    extends Person
    implements Serializable
{

    final static long serialVersionUID = -2868552186251953759L;
    private List<Department> departmentList;

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList) {
        super(firstname, lastname, id);
        this.departmentList = departmentList;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof NestedArrayPerson) == false) {
            return false;
        }
        NestedArrayPerson otherObject = ((NestedArrayPerson) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the departmentList.
     * 
     * @return
     *     departmentList
     */
    public List<Department> getDepartmentList() {
        return departmentList;
    }

    /**
     * Set the departmentList.
     * 
     * @param departmentList
     *     the new departmentList
     */
    public void setDepartmentList(List<Department> departmentList) {
        this.departmentList = departmentList;
    }

}
-----------------------------------com.gen.test.model.NestedNestedArrayPerson.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedNestedArrayPerson
    extends NestedArrayPerson
    implements Serializable
{

    final static long serialVersionUID = -2856984799440197567L;
    private List<Person> childList;

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList, List<Person> childList) {
        super(firstname, lastname, id, departmentList);
        this.childList = childList;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof NestedNestedArrayPerson) == false) {
            return false;
        }
        NestedNestedArrayPerson otherObject = ((NestedNestedArrayPerson) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the childList.
     * 
     * @return
     *     childList
     */
    public List<Person> getChildList() {
        return childList;
    }

    /**
     * Set the childList.
     * 
     * @param childList
     *     the new childList
     */
    public void setChildList(List<Person> childList) {
        this.childList = childList;
    }

}
-----------------------------------com.gen.test.model.Validation.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = -2671906597567196602L;
    private String firstname;
    private String lastname;
    private String pattern;
    private String length;
    private String minLength;
    private Long id;
    private AnEnum anEnum;
    private EnumChecks anotherEnum;
    private List<Object> testDefArray;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, List<Object> testDefArray) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.testDefArray = testDefArray;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(java.lang.Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Validation) == false) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

}
-----------------------------------com.gen.test.ManagerController.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import com.gen.test.model.Manager;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface ManagerController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Person> getManagers();

    /**
     * No description
     * 
     */
    public ResponseEntity<?> createManager(Manager manager);

    /**
     * No description
     * 
     */
    public ResponseEntity<?> deleteManagers();

}
-----------------------------------com.gen.test.ManagerControllerDecorator.java-----------------------------------

package com.gen.test;

import javax.validation.Valid;
import com.gen.foo.Person;
import com.gen.test.model.Manager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/managers", produces = "application/json")
public class ManagerControllerDecorator
    implements ManagerController
{

    @Autowired
    private ManagerController managerControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Person> getManagers() {
        return this.managerControllerDelegate.getManagers();
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<?> createManager(
        @Valid
        @RequestBody
        Manager manager) {
        return this.managerControllerDelegate.createManager(manager);
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteManagers() {
        return this.managerControllerDelegate.deleteManagers();
    }

}
-----------------------------------com.gen.test.NestedArrayPersonController.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface NestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Person> getNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedArrayPersons", produces = "application/json")
public class NestedArrayPersonControllerDecorator
    implements NestedArrayPersonController
{

    @Autowired
    private NestedArrayPersonController nestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Person> getNestedArrayPersons() {
        return this.nestedArrayPersonControllerDelegate.getNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.NestedNestedArrayPersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedNestedArrayPerson;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface NestedNestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<NestedNestedArrayPerson>> getNestedNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedNestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedNestedArrayPerson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedNestedArrayPersons", produces = "application/json")
public class NestedNestedArrayPersonControllerDecorator
    implements NestedNestedArrayPersonController
{

    @Autowired
    private NestedNestedArrayPersonController nestedNestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<NestedNestedArrayPerson>> getNestedNestedArrayPersons() {
        return this.nestedNestedArrayPersonControllerDelegate.getNestedNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.PersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.foo.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface PersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Person>> getPersons();

}
-----------------------------------com.gen.test.PersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.foo.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/persons", produces = "application/json")
public class PersonControllerDecorator
    implements PersonController
{

    @Autowired
    private PersonController personControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Person>> getPersons() {
        return this.personControllerDelegate.getPersons();
    }

}
-----------------------------------com.gen.test.PersonListController.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface PersonListController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Person> getPersonLists();

}
-----------------------------------com.gen.test.PersonListControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/personLists", produces = "application/json")
public class PersonListControllerDecorator
    implements PersonListController
{

    @Autowired
    private PersonListController personListControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Person> getPersonLists() {
        return this.personListControllerDelegate.getPersonLists();
    }

}
-----------------------------------com.gen.test.ValidationController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface ValidationController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Validation> getValidations();

}
-----------------------------------com.gen.test.ValidationControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/validations", produces = "application/json")
public class ValidationControllerDecorator
    implements ValidationController
{

    @Autowired
    private ValidationController validationControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Validation> getValidations() {
        return this.validationControllerDelegate.getValidations();
    }

}
-----------------------------------com.gen.foo.Person.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = -2698346341919044539L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Person) == false) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

}

2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Manager
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.ClearanceLevel
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
-----------------------------------com.gen.foo.ClearanceLevel.java-----------------------------------

package com.gen.foo;


public enum ClearanceLevel {

    low,
    high;

}
-----------------------------------com.gen.foo.Department.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = -4301255766477285283L;
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Department) == false) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

}
-----------------------------------com.gen.foo.Manager.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Manager
    extends Person
    implements Serializable
{

    final static long serialVersionUID = -4253333736013576385L;
    private Department department;
    private ClearanceLevel clearanceLevel;

    /**
     * Creates a new Manager.
     * 
     */
    public Manager() {
        super();
    }

    /**
     * Creates a new Manager.
     * 
     */
    public Manager(String firstname, String lastname, Long id, Department department, ClearanceLevel clearanceLevel) {
        super(firstname, lastname, id);
        this.department = department;
        this.clearanceLevel = clearanceLevel;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Manager) == false) {
            return false;
        }
        Manager otherObject = ((Manager) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the department.
     * 
     * @return
     *     department
     */
    public Department getDepartment() {
        return department;
    }

    /**
     * Set the department.
     * 
     * @param department
     *     the new department
     */
    public void setDepartment(Department department) {
        this.department = department;
    }

    /**
     * Returns the clearanceLevel.
     * 
     * @return
     *     clearanceLevel
     */
    public ClearanceLevel getClearanceLevel() {
        return clearanceLevel;
    }

    /**
     * Set the clearanceLevel.
     * 
     * @param clearanceLevel
     *     the new clearanceLevel
     */
    public void setClearanceLevel(ClearanceLevel clearanceLevel) {
        this.clearanceLevel = clearanceLevel;
    }

}
-----------------------------------com.gen.foo.Person.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = -4269858572475384962L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Person) == false) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

}



2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Manager
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.ClearanceLevel
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
-----------------------------------com.gen.foo.ClearanceLevel.java-----------------------------------

package com.gen.foo;


public enum ClearanceLevel {

    low,
    high;

}
-----------------------------------com.gen.foo.Department.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import javax.validation.constraints.NotNull;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = -4017028528653563676L;
    @NotNull
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Department) == false) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

}
-----------------------------------com.gen.foo.Manager.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import javax.validation.constraints.NotNull;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Manager
    extends Person
    implements Serializable
{

    final static long serialVersionUID = -3970758981406538906L;
    @NotNull
    private Department department;
    @NotNull
    private ClearanceLevel clearanceLevel;

    /**
     * Creates a new Manager.
     * 
     */
    public Manager() {
        super();
    }

    /**
     * Creates a new Manager.
     * 
     */
    public Manager(String firstname, String lastname, Long id, Department department, ClearanceLevel clearanceLevel) {
        super(firstname, lastname, id);
        this.department = department;
        this.clearanceLevel = clearanceLevel;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Manager) == false) {
            return false;
        }
        Manager otherObject = ((Manager) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the department.
     * 
     * @return
     *     department
     */
    public Department getDepartment() {
        return department;
    }

    /**
     * Set the department.
     * 
     * @param department
     *     the new department
     */
    public void setDepartment(Department department) {
        this.department = department;
    }

    /**
     * Returns the clearanceLevel.
     * 
     * @return
     *     clearanceLevel
     */
    public ClearanceLevel getClearanceLevel() {
        return clearanceLevel;
    }

    /**
     * Set the clearanceLevel.
     * 
     * @param clearanceLevel
     *     the new clearanceLevel
     */
    public void setClearanceLevel(ClearanceLevel clearanceLevel) {
        this.clearanceLevel = clearanceLevel;
    }

}
-----------------------------------com.gen.foo.Person.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import javax.validation.constraints.NotNull;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = -3974063947839907163L;
    @NotNull
    private String firstname;
    @NotNull
    private String lastname;
    @NotNull
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Person) == false) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

}

2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Manager
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Manager
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.ClearanceLevel
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Validation
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.AnEnum
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedNestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedNestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedNestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedNestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedNestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedNestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: childList to NestedNestedArrayPerson
-----------------------------------com.gen.test.model.AnEnum.java-----------------------------------

package com.gen.test.model;


public enum AnEnum {

    blue,
    red,
    green;

}
-----------------------------------com.gen.test.model.EnumChecks.java-----------------------------------

package com.gen.test.model;


public enum EnumChecks {

    one,
    two,
    three;

}
-----------------------------------com.gen.test.model.NestedArrayPerson.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.List;
import com.gen.foo.Person;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedArrayPerson
    extends Person
    implements Serializable
{

    final static long serialVersionUID = -3757588551965005877L;
    private List<Department> departmentList;

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList) {
        super(firstname, lastname, id);
        this.departmentList = departmentList;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof NestedArrayPerson) == false) {
            return false;
        }
        NestedArrayPerson otherObject = ((NestedArrayPerson) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the departmentList.
     * 
     * @return
     *     departmentList
     */
    public List<Department> getDepartmentList() {
        return departmentList;
    }

    /**
     * Set the departmentList.
     * 
     * @param departmentList
     *     the new departmentList
     */
    public void setDepartmentList(List<Department> departmentList) {
        this.departmentList = departmentList;
    }

}
-----------------------------------com.gen.test.model.NestedNestedArrayPerson.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedNestedArrayPerson
    extends NestedArrayPerson
    implements Serializable
{

    final static long serialVersionUID = -3760893514103406837L;
    private List<Person> childList;

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList, List<Person> childList) {
        super(firstname, lastname, id, departmentList);
        this.childList = childList;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof NestedNestedArrayPerson) == false) {
            return false;
        }
        NestedNestedArrayPerson otherObject = ((NestedNestedArrayPerson) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the childList.
     * 
     * @return
     *     childList
     */
    public List<Person> getChildList() {
        return childList;
    }

    /**
     * Set the childList.
     * 
     * @param childList
     *     the new childList
     */
    public void setChildList(List<Person> childList) {
        this.childList = childList;
    }

}
-----------------------------------com.gen.test.model.Validation.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = -4073212983790627805L;
    private String firstname;
    private String lastname;
    private String pattern;
    private String length;
    private String minLength;
    private Long id;
    private AnEnum anEnum;
    private EnumChecks anotherEnum;
    private List<Object> testDefArray;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, List<Object> testDefArray) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.testDefArray = testDefArray;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(java.lang.Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Validation) == false) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

}
-----------------------------------com.gen.test.ManagerController.java-----------------------------------

package com.gen.test;

import com.gen.foo.Manager;
import com.gen.foo.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface ManagerController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Person> getManagers();

    /**
     * No description
     * 
     */
    public ResponseEntity<?> createManager(Manager manager);

    /**
     * No description
     * 
     */
    public ResponseEntity<?> deleteManagers();

}
-----------------------------------com.gen.test.ManagerControllerDecorator.java-----------------------------------

package com.gen.test;

import javax.validation.Valid;
import com.gen.foo.Manager;
import com.gen.foo.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/managers", produces = "application/json")
public class ManagerControllerDecorator
    implements ManagerController
{

    @Autowired
    private ManagerController managerControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Person> getManagers() {
        return this.managerControllerDelegate.getManagers();
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<?> createManager(
        @Valid
        @RequestBody
        Manager manager) {
        return this.managerControllerDelegate.createManager(manager);
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteManagers() {
        return this.managerControllerDelegate.deleteManagers();
    }

}
-----------------------------------com.gen.test.NestedArrayPersonController.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface NestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Person> getNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedArrayPersons", produces = "application/json")
public class NestedArrayPersonControllerDecorator
    implements NestedArrayPersonController
{

    @Autowired
    private NestedArrayPersonController nestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Person> getNestedArrayPersons() {
        return this.nestedArrayPersonControllerDelegate.getNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.NestedNestedArrayPersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedNestedArrayPerson;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface NestedNestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<NestedNestedArrayPerson>> getNestedNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedNestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedNestedArrayPerson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedNestedArrayPersons", produces = "application/json")
public class NestedNestedArrayPersonControllerDecorator
    implements NestedNestedArrayPersonController
{

    @Autowired
    private NestedNestedArrayPersonController nestedNestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<NestedNestedArrayPerson>> getNestedNestedArrayPersons() {
        return this.nestedNestedArrayPersonControllerDelegate.getNestedNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.PersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.foo.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface PersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Person>> getPersons();

}
-----------------------------------com.gen.test.PersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.foo.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/persons", produces = "application/json")
public class PersonControllerDecorator
    implements PersonController
{

    @Autowired
    private PersonController personControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Person>> getPersons() {
        return this.personControllerDelegate.getPersons();
    }

}
-----------------------------------com.gen.test.PersonListController.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface PersonListController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Person> getPersonLists();

}
-----------------------------------com.gen.test.PersonListControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/personLists", produces = "application/json")
public class PersonListControllerDecorator
    implements PersonListController
{

    @Autowired
    private PersonListController personListControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Person> getPersonLists() {
        return this.personListControllerDelegate.getPersonLists();
    }

}
-----------------------------------com.gen.test.ValidationController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface ValidationController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Validation> getValidations();

}
-----------------------------------com.gen.test.ValidationControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/validations", produces = "application/json")
public class ValidationControllerDecorator
    implements ValidationController
{

    @Autowired
    private ValidationController validationControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Validation> getValidations() {
        return this.validationControllerDelegate.getValidations();
    }

}
-----------------------------------com.gen.foo.ClearanceLevel.java-----------------------------------

package com.gen.foo;


public enum ClearanceLevel {

    low,
    high;

}
-----------------------------------com.gen.foo.Department.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = -4061645592683904317L;
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Department) == false) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

}
-----------------------------------com.gen.foo.Manager.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Manager
    extends Person
    implements Serializable
{

    final static long serialVersionUID = -3982326363923327803L;
    private Department department;
    private ClearanceLevel clearanceLevel;

    /**
     * Creates a new Manager.
     * 
     */
    public Manager() {
        super();
    }

    /**
     * Creates a new Manager.
     * 
     */
    public Manager(String firstname, String lastname, Long id, Department department, ClearanceLevel clearanceLevel) {
        super(firstname, lastname, id);
        this.department = department;
        this.clearanceLevel = clearanceLevel;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Manager) == false) {
            return false;
        }
        Manager otherObject = ((Manager) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the department.
     * 
     * @return
     *     department
     */
    public Department getDepartment() {
        return department;
    }

    /**
     * Set the department.
     * 
     * @param department
     *     the new department
     */
    public void setDepartment(Department department) {
        this.department = department;
    }

    /**
     * Returns the clearanceLevel.
     * 
     * @return
     *     clearanceLevel
     */
    public ClearanceLevel getClearanceLevel() {
        return clearanceLevel;
    }

    /**
     * Set the clearanceLevel.
     * 
     * @param clearanceLevel
     *     the new clearanceLevel
     */
    public void setClearanceLevel(ClearanceLevel clearanceLevel) {
        this.clearanceLevel = clearanceLevel;
    }

}
-----------------------------------com.gen.foo.Person.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = -3988936305379998907L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Person) == false) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

}

2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.NestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedArrayPerson
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Validation
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.AnEnum
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Manager
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-05-10 15:43:06 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.ClearanceLevel
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-05-10 15:43:06 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-05-10 15:43:06 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
-----------------------------------com.gen.test.model.AnEnum.java-----------------------------------

package com.gen.test.model;


public enum AnEnum {

    blue,
    red,
    green;

}
-----------------------------------com.gen.test.model.ClearanceLevel.java-----------------------------------

package com.gen.test.model;


public enum ClearanceLevel {

    low,
    high;

}
-----------------------------------com.gen.test.model.EnumChecks.java-----------------------------------

package com.gen.test.model;


public enum EnumChecks {

    one,
    two,
    three;

}
-----------------------------------com.gen.test.model.Manager.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import com.gen.foo.Department;
import com.gen.foo.Person;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Manager
    extends Person
    implements Serializable
{

    final static long serialVersionUID = -3516325894954940783L;
    private Department department;
    private ClearanceLevel clearanceLevel;

    /**
     * Creates a new Manager.
     * 
     */
    public Manager() {
        super();
    }

    /**
     * Creates a new Manager.
     * 
     */
    public Manager(String firstname, String lastname, Long id, Department department, ClearanceLevel clearanceLevel) {
        super(firstname, lastname, id);
        this.department = department;
        this.clearanceLevel = clearanceLevel;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Manager) == false) {
            return false;
        }
        Manager otherObject = ((Manager) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the department.
     * 
     * @return
     *     department
     */
    public Department getDepartment() {
        return department;
    }

    /**
     * Set the department.
     * 
     * @param department
     *     the new department
     */
    public void setDepartment(Department department) {
        this.department = department;
    }

    /**
     * Returns the clearanceLevel.
     * 
     * @return
     *     clearanceLevel
     */
    public ClearanceLevel getClearanceLevel() {
        return clearanceLevel;
    }

    /**
     * Set the clearanceLevel.
     * 
     * @param clearanceLevel
     *     the new clearanceLevel
     */
    public void setClearanceLevel(ClearanceLevel clearanceLevel) {
        this.clearanceLevel = clearanceLevel;
    }

}
-----------------------------------com.gen.test.model.Validation.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = -3924489429864546841L;
    private String firstname;
    private String lastname;
    private String pattern;
    private String length;
    private String minLength;
    private Long id;
    private AnEnum anEnum;
    private EnumChecks anotherEnum;
    private List<Object> testDefArray;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, List<Object> testDefArray) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.testDefArray = testDefArray;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(java.lang.Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Validation) == false) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

}
-----------------------------------com.gen.test.ManagerController.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import com.gen.test.model.Manager;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface ManagerController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Person> getManagers();

    /**
     * No description
     * 
     */
    public ResponseEntity<?> createManager(Manager manager);

    /**
     * No description
     * 
     */
    public ResponseEntity<?> deleteManagers();

}
-----------------------------------com.gen.test.ManagerControllerDecorator.java-----------------------------------

package com.gen.test;

import javax.validation.Valid;
import com.gen.foo.Person;
import com.gen.test.model.Manager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/managers", produces = "application/json")
public class ManagerControllerDecorator
    implements ManagerController
{

    @Autowired
    private ManagerController managerControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Person> getManagers() {
        return this.managerControllerDelegate.getManagers();
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<?> createManager(
        @Valid
        @RequestBody
        Manager manager) {
        return this.managerControllerDelegate.createManager(manager);
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteManagers() {
        return this.managerControllerDelegate.deleteManagers();
    }

}
-----------------------------------com.gen.test.NestedArrayPersonController.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface NestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Person> getNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedArrayPersons", produces = "application/json")
public class NestedArrayPersonControllerDecorator
    implements NestedArrayPersonController
{

    @Autowired
    private NestedArrayPersonController nestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Person> getNestedArrayPersons() {
        return this.nestedArrayPersonControllerDelegate.getNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.NestedNestedArrayPersonController.java-----------------------------------

package com.gen.test;

import com.gen.foo.NestedArrayPerson;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface NestedNestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<NestedArrayPerson> getNestedNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedNestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.foo.NestedArrayPerson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedNestedArrayPersons", produces = "application/json")
public class NestedNestedArrayPersonControllerDecorator
    implements NestedNestedArrayPersonController
{

    @Autowired
    private NestedNestedArrayPersonController nestedNestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<NestedArrayPerson> getNestedNestedArrayPersons() {
        return this.nestedNestedArrayPersonControllerDelegate.getNestedNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.PersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.foo.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface PersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Person>> getPersons();

}
-----------------------------------com.gen.test.PersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.foo.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/persons", produces = "application/json")
public class PersonControllerDecorator
    implements PersonController
{

    @Autowired
    private PersonController personControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Person>> getPersons() {
        return this.personControllerDelegate.getPersons();
    }

}
-----------------------------------com.gen.test.PersonListController.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface PersonListController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Person> getPersonLists();

}
-----------------------------------com.gen.test.PersonListControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.foo.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/personLists", produces = "application/json")
public class PersonListControllerDecorator
    implements PersonListController
{

    @Autowired
    private PersonListController personListControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Person> getPersonLists() {
        return this.personListControllerDelegate.getPersonLists();
    }

}
-----------------------------------com.gen.test.ValidationController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
public interface ValidationController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Validation> getValidations();

}
-----------------------------------com.gen.test.ValidationControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.2)
 * 
 */
@RestController
@RequestMapping(value = "/api/validations", produces = "application/json")
public class ValidationControllerDecorator
    implements ValidationController
{

    @Autowired
    private ValidationController validationControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Validation> getValidations() {
        return this.validationControllerDelegate.getValidations();
    }

}
-----------------------------------com.gen.foo.Department.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = -3904659622674402713L;
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Department) == false) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

}
-----------------------------------com.gen.foo.NestedArrayPerson.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedArrayPerson
    extends Person
    implements Serializable
{

    final static long serialVersionUID = -3825340393913826199L;
    private List<Department> departmentList;

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList) {
        super(firstname, lastname, id);
        this.departmentList = departmentList;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof NestedArrayPerson) == false) {
            return false;
        }
        NestedArrayPerson otherObject = ((NestedArrayPerson) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the departmentList.
     * 
     * @return
     *     departmentList
     */
    public List<Department> getDepartmentList() {
        return departmentList;
    }

    /**
     * Set the departmentList.
     * 
     * @param departmentList
     *     the new departmentList
     */
    public void setDepartmentList(List<Department> departmentList) {
        this.departmentList = departmentList;
    }

}
-----------------------------------com.gen.foo.Person.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = -3823687910697142071L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    public java.lang.String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Person) == false) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder().toHashCode();
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

}

Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.223 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue61RulesTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:07 INFO [naming.SchemaHelper] - Loading referenced schema sample_unit.json
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.716 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.141 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Spring4RestTemplateClientRulesHtppHeadersTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.047 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Spring4RestTemplateClientRulesTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.106 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.ImplementMeMethodBodyRuleTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.03 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.MethodCommentRuleTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.087 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.ControllerMethodSignatureRuleTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.045 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.ClassFieldDeclarationRuleTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.033 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.ImplementsControllerInferfaceRuleTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.027 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.ControllerClassDeclarationRuleTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.034 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.ClassCommentRuleTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.038 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.DelegatingMethodBodyRuleTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.037 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.ControllerInterfaceDeclarationRuleTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.035 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.MethodParamsRuleTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.036 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.PackageRuleTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.035 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Spring3ControllerRulesTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.042 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.SpringFeignClientRulesTest
2017-05-10 15:43:07 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.08 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.pojogen.JsonSchema2PojoTest
2017-05-10 15:43:08 INFO [naming.SchemaHelper] - Loading referenced schema classpath:pojogen/nested.schema
2017-05-10 15:43:08 INFO [naming.SchemaHelper] - Loading referenced schema pojogen/B.json
2017-05-10 15:43:08 DEBUG [naming.SchemaHelper] - Referenced Schema contains self $refs or not found in classpath. Regenerating model withouth classpath: for Accounts
2017-05-10 15:43:08 INFO [naming.SchemaHelper] - Loading referenced schema pojogen/B.json
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.238 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.RequestBodyWithValidationTest
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.022 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue32RulesTest
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.spring.SpringRulesTest
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.028 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.MultipartMimeRequestTest
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesHttpHeadersTest
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.02 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue76RulesTest
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.011 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.RamlEquivalenceRulesTest
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-05-10 15:43:08 INFO [naming.SchemaHelper] - Loading referenced schema raml/Person.json
2017-05-10 15:43:08 INFO [naming.SchemaHelper] - Loading referenced schema sample_unit.json
2017-05-10 15:43:08 INFO [naming.SchemaHelper] - Loading referenced schema raml/Person.json
2017-05-10 15:43:08 INFO [naming.SchemaHelper] - Loading referenced schema sample_unit.json
2017-05-10 15:43:08 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:08 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Person
2017-05-10 15:43:08 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-05-10 15:43:08 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-05-10 15:43:08 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-05-10 15:43:08 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Manager
2017-05-10 15:43:08 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-05-10 15:43:08 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-05-10 15:43:08 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-05-10 15:43:08 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-05-10 15:43:08 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-05-10 15:43:08 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Department
2017-05-10 15:43:08 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-05-10 15:43:08 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-05-10 15:43:08 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.ClearanceLevel
2017-05-10 15:43:08 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-05-10 15:43:08 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-05-10 15:43:08 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.145 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Spring3ControllerRulesHttpHeadersTest
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.028 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue117RulesTest
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 sec
Running test.phoenixnap.oss.plugin.naming.NamingHelperTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
Running test.phoenixnap.oss.plugin.naming.RamlStyleCheckerTest
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:08 DEBUG [checkers.ResourceUrlStyleChecker] - Checking resource /base
2017-05-10 15:43:08 DEBUG [checkers.ResourceUrlStyleChecker] - Checking resource /endpointWithGet
2017-05-10 15:43:08 DEBUG [checkers.ResourceUrlStyleChecker] - Checking resource /endpointWithGetAndPost
2017-05-10 15:43:08 DEBUG [checkers.ResourceUrlStyleChecker] - Checking resource /secondBase
2017-05-10 15:43:08 DEBUG [checkers.ResourceUrlStyleChecker] - Checking resource /endpointWithGet
2017-05-10 15:43:08 DEBUG [checkers.ResourceUrlStyleChecker] - Checking resource /endpointWithURIParam
2017-05-10 15:43:08 DEBUG [checkers.ResourceUrlStyleChecker] - Checking resource /{uriParam}
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: PUT
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: PUT
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: POST
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: POST
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:08 DEBUG [checkers.ResponseCodeDefinitionStyleChecker] - Checking Action: PUT
2017-05-10 15:43:08 DEBUG [checkers.ResponseCodeDefinitionStyleChecker] - Checking Action: DELETE
2017-05-10 15:43:08 DEBUG [checkers.ResponseCodeDefinitionStyleChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ResponseCodeDefinitionStyleChecker] - Checking Action: GET
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: PUT
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: PUT
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: PUT
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /ignored
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /thisShouldBeIgnored
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /balls
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Collection Resource identified: /balls
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /{ignoreMeId}
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /books
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Collection Resource identified: /books
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /{bookId}
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /houses
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Collection Resource identified: /houses
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /{houseId}
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-05-10 15:43:08 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: POST
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: POST
2017-05-10 15:43:08 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /ignored
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /thisShouldBeIgnored
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /ball
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Collection Resource identified: /ball
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /{ignoremeId}
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /books
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Collection Resource identified: /books
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /{bookId}
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /house
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Collection Resource identified: /house
2017-05-10 15:43:08 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /{ignoreMeId}
2017-05-10 15:43:08 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:08 DEBUG [checkers.ResponseCodeDefinitionStyleChecker] - Checking Action: PUT
2017-05-10 15:43:08 DEBUG [checkers.ResponseCodeDefinitionStyleChecker] - Checking Action: DELETE
2017-05-10 15:43:08 DEBUG [checkers.ResponseCodeDefinitionStyleChecker] - Checking Action: GET
Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.353 sec
Running test.phoenixnap.oss.plugin.naming.JavaDocEntryTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec
Running test.phoenixnap.oss.plugin.naming.SpringMvcResourceParserTest
2017-05-10 15:43:09 INFO [parser.ResourceParser] - Parsing resource: TestController 
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter/{pathVariable} GET from method: getMethodSimpleParameterPathVariable
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter/{pathVariable} POST from method: postMethodSimpleParameterPathVariable
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll PATCH from method: simpleMethodAllHttpMethods
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll TRACE from method: simpleMethodAllHttpMethods
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll DELETE from method: simpleMethodAllHttpMethods
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll GET from method: simpleMethodAllHttpMethods
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll POST from method: simpleMethodAllHttpMethods
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll HEAD from method: simpleMethodAllHttpMethods
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll OPTIONS from method: simpleMethodAllHttpMethods
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll PUT from method: simpleMethodAllHttpMethods
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethod GET from method: simpleGetMethod
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethod POST from method: simplePostMethod
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter GET from method: getMethodSimpleParameter
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameterBody GET from method: getMethodBodyParameter
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameterBody POST from method: postMethodBodyParameter
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter POST from method: postMethodSimpleParameter
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/twoParameter GET from method: getMethodTwoParameter
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/twoParameter POST from method: postMethodTwoParameter
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameterBodyObject GET from method: postMethodTwoParameter
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameterBodyObject POST from method: postMethodTwoParameter
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/miscCases/{pathVariable} GET from method: getMethodMiscCasesPathVariable
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/responseObject GET from method: postResponseObject
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/responseObject POST from method: postResponseObject
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/methodBodyIgnore PUT from method: putMethodBodyIgnore
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/descriptionTest/secondBlock/thirdBlock/stuff PUT from method: descriptionTest
2017-05-10 15:43:09 INFO [parser.ResourceParser] - Parsing resource: UriPrefixIgnoredController 
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /the/url/that/should/be/ignored/base/endpoint GET from method: endpoint
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /the/url/that/should/be/ignored/base/endpoint GET from method: endpointAgain
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /the/url/that/should/be/ignored/base/endpoint POST from method: secondEndpoint
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /the/url/that/should/be/ignored/base/endpoint POST from method: secondEndpointAgain
2017-05-10 15:43:09 INFO [parser.ResourceParser] - Parsing resource: BugController 
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /forgotStuff/{somethingID}/resendStuff POST from method: forgotStuffResendStuff
2017-05-10 15:43:09 INFO [parser.ResourceParser] - Parsing resource: MultipleContentTypeTestController 
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpoint GET from method: endpoint
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpoint GET from method: endpointAgain
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpoint POST from method: secondEndpoint
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpoint POST from method: secondEndpointAgain
2017-05-10 15:43:09 INFO [parser.ResourceParser] - Parsing resource: WrappedResponseBodyTestController 
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType GET from method: anotherEndpointWithResponseType
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseTypeNonGeneric GET from method: endpointWithResponseTypeNonGeneric
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseTypeNonGeneric POST from method: anotherEndpointWithResponseTypeNonGeneric
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithResponseType
2017-05-10 15:43:09 INFO [parser.ResourceParser] - Parsing resource: ShorthandTestController 
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter/{pathVariable} GET from method: getMethodSimpleParameterPathVariable
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter/{pathVariable} POST from method: postMethodSimpleParameterPathVariable
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethod GET from method: simpleGetMethod
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethod POST from method: simplePostMethod
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter GET from method: getMethodSimpleParameter
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameterBody GET from method: getMethodBodyParameter
2017-05-10 15:43:09 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameterBody POST from method: postMethodBodyParameter
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter POST from method: postMethodSimpleParameter
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/twoParameter GET from method: getMethodTwoParameter
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/twoParameter POST from method: postMethodTwoParameter
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/miscCases/{pathVariable} GET from method: getMethodMiscCasesPathVariable
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/methodBodyIgnore PUT from method: putMethodBodyIgnore
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/descriptionTest/secondBlock/thirdBlock/stuff PUT from method: descriptionTest
2017-05-10 15:43:10 INFO [parser.ResourceParser] - Parsing resource: NoValueController 
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base GET from method: simpleMethodAllHttpMethods
2017-05-10 15:43:10 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.109 sec
Running test.phoenixnap.oss.plugin.naming.SchemaHelperTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running test.phoenixnap.oss.plugin.naming.RamlVerifierTest
2017-05-10 15:43:10 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:10 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-05-10 15:43:10 INFO [parser.ResourceParser] - Parsing resource: ParamTestController 
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: endpointWithGet
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParamGet
2017-05-10 15:43:10 INFO [parser.ResourceParser] - Parsing resource: ParamTestControllerDowngradeToWarning 
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParamGet
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} POST from method: endpointWithURIParamPost
2017-05-10 15:43:10 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-05-10 15:43:10 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param3 in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-05-10 15:43:10 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param4 in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action POST
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param5
2017-05-10 15:43:10 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param5 in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param6
2017-05-10 15:43:10 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param6 in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action POST
2017-05-10 15:43:10 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:10 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-05-10 15:43:10 INFO [parser.ResourceParser] - Parsing resource: StyleCheckResourceDuplicateCommand 
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /somethingCool/{somethingCoolId}/child GET from method: isAParticularSomethingCoolChild
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /somethingCool/child GET from method: isSomethingCoolChild
2017-05-10 15:43:10 INFO [parser.ResourceParser] - Parsing resource: StyleCheckResourceDuplicateCommandSecond 
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /somethingCool/status GET from method: isSomethingCoolStatus
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /somethingCool/{somethingCoolId}/status GET from method: isAParticularSomethingCoolStatus
2017-05-10 15:43:10 INFO [checkers.ResourceExistenceChecker] - Performing Resource Existence Checks
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in implementation
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /somethingCool
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /{somethingCoolId}
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /status
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /child
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /status
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /child
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in RAML
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /somethingCool
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /{somethingCoolId}
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /child
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /status
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /child
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /status
2017-05-10 15:43:10 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:10 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-05-10 15:43:10 INFO [parser.ResourceParser] - Parsing resource: VerifierTestController 
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: simpleMethodAllHttpMethods
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost GET from method: simpleGetMethod
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost POST from method: simpleGetMethod
2017-05-10 15:43:10 INFO [checkers.ResourceExistenceChecker] - Performing Resource Existence Checks
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in implementation
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /base
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGetAndPost
2017-05-10 15:43:10 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Expected resource missing: /secondBase in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in RAML
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /base
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGetAndPost
2017-05-10 15:43:10 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:10 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-05-10 15:43:10 INFO [parser.ResourceParser] - Parsing resource: ContentTypeTestController 
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithResponseType
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithNoContentType GET from method: endpointWithNoContentType
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithRequestType POST from method: endpointWithRequestType
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithRequestAndResponseType POST from method: endpointWithRequestAndResponseType
2017-05-10 15:43:10 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithNoContentType in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithNoContentType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action GET
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestType in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestAndResponseType in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestAndResponseType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Processing key application/everything.
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Processing key application/everything.
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithNoContentType in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithNoContentType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action GET
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestType in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestAndResponseType in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestAndResponseType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-05-10 15:43:10 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:10 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-05-10 15:43:10 INFO [parser.ResourceParser] - Parsing resource: VerifierTestController 
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: simpleMethodAllHttpMethods
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost GET from method: simpleGetMethod
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost POST from method: simpleGetMethod
2017-05-10 15:43:10 INFO [parser.ResourceParser] - Parsing resource: SecondVerifierTestController 
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithGet GET from method: endpointWithGet
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParam
2017-05-10 15:43:10 INFO [checkers.ResourceExistenceChecker] - Performing Resource Existence Checks
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in implementation
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /base
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGetAndPost
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /secondBase
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithURIParam
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /{uriParam}
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in RAML
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /base
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGetAndPost
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /secondBase
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithURIParam
2017-05-10 15:43:10 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /{uriParam}
2017-05-10 15:43:10 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:10 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-05-10 15:43:10 INFO [parser.ResourceParser] - Parsing resource: ParamTestController 
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: endpointWithGet
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParamGet
2017-05-10 15:43:10 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Skipping visiting action POST /base/endpointWithURIParam/{uriParam} in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-05-10 15:43:10 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-05-10 15:43:10 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:10 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-05-10 15:43:10 INFO [parser.ResourceParser] - Parsing resource: MultiContentTypeTestController 
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithResponseType
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithNoContentType GET from method: endpointWithNoContentType
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithRequestType POST from method: endpointWithRequestType
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithRequestAndResponseType POST from method: endpointWithRequestAndResponseType
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithDifferentResponseType
2017-05-10 15:43:10 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithNoContentType in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithNoContentType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action GET
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestType in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestAndResponseType in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestAndResponseType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Processing key application/everything.
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Processing key application/json.
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithNoContentType in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithNoContentType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action GET
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestType in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestAndResponseType in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestAndResponseType
2017-05-10 15:43:10 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-05-10 15:43:10 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:10 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-05-10 15:43:10 INFO [parser.ResourceParser] - Parsing resource: ResponseBodyTestController 
2017-05-10 15:43:10 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithResponseType
2017-05-10 15:43:10 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in CONTRACT
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-05-10 15:43:10 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-05-10 15:43:10 DEBUG [checkers.ActionResponseBodySchemaChecker] - Found body for mime type application/test+json
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in SOURCE
2017-05-10 15:43:10 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-05-10 15:43:10 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-05-10 15:43:10 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:11 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: VerifierTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: simpleMethodAllHttpMethods
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost GET from method: simpleGetMethod
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost POST from method: simpleGetMethod
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: SecondVerifierTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithGet GET from method: endpointWithGet
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParam
2017-05-10 15:43:11 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /base
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGetAndPost in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /secondBase
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithGet in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithURIParam
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam/{uriParam} in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /base
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGetAndPost in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /secondBase
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithGet in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithURIParam
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam/{uriParam} in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:11 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: ParamTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: endpointWithGet
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParamGet
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: ParamTestControllerPostWarning 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} POST from method: endpointWithURIParamPost
2017-05-10 15:43:11 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action POST
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param5
2017-05-10 15:43:11 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter but found in Form Parameters  param5 in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param6
2017-05-10 15:43:11 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter but found in Form Parameters  param6 in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action POST
2017-05-10 15:43:11 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:11 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: ResponseBodyTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithResponseType
2017-05-10 15:43:11 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-05-10 15:43:11 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-05-10 15:43:11 DEBUG [checkers.ActionResponseBodySchemaChecker] - Found body for mime type application/test+json
2017-05-10 15:43:11 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Response Body field type is different element2
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-05-10 15:43:11 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-05-10 15:43:11 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:11 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: ResponseBodyTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithResponseType
2017-05-10 15:43:11 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-05-10 15:43:11 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-05-10 15:43:11 DEBUG [checkers.ActionResponseBodySchemaChecker] - Found body for mime type application/test+json
2017-05-10 15:43:11 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Response Body field type is missing element3
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-05-10 15:43:11 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-05-10 15:43:11 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:11 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: ResponseBodyTestControllerError 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithResponseType
2017-05-10 15:43:11 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-05-10 15:43:11 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-05-10 15:43:11 DEBUG [checkers.ActionResponseBodySchemaChecker] - Found body for mime type application/test+json
2017-05-10 15:43:11 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Response Body field type is missing element3
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-05-10 15:43:11 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-05-10 15:43:11 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:11 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: VerifierUriParamTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/{someUriParam}/endpointWithGet GET from method: simpleMethodAllHttpMethods
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/{someUriParam}/endpointWithGetAndPost GET from method: simpleGetMethod
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/{someUriParam}/endpointWithGetAndPost POST from method: simpleGetMethod
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: SecondVerifierTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithGet GET from method: endpointWithGet
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParam
2017-05-10 15:43:11 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /base
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting URI Param resource: /{someUriParam} in CONTRACT instead of /{aURiParam} as expected
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{aURiParam}
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/{aURiParam}/endpointWithGet in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/{aURiParam}/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/{aURiParam}/endpointWithGetAndPost in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/{aURiParam}/endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/{aURiParam}/endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /secondBase
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithGet in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithURIParam
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam/{uriParam} in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /base
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting URI Param resource: /{aURiParam} in SOURCE instead of /{someUriParam} as expected
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{someUriParam}
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/{someUriParam}/endpointWithGet in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/{someUriParam}/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/{someUriParam}/endpointWithGetAndPost in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/{someUriParam}/endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/{someUriParam}/endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /secondBase
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithGet in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithURIParam
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam/{uriParam} in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:11 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: ParamTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: endpointWithGet
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParamGet
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: ParamTestControllerPostMissing 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} POST from method: endpointWithURIParamPost
2017-05-10 15:43:11 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action POST
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param5
2017-05-10 15:43:11 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param5 in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param6
2017-05-10 15:43:11 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param6 in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action POST
2017-05-10 15:43:11 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:11 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: VerifierTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: simpleMethodAllHttpMethods
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost GET from method: simpleGetMethod
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost POST from method: simpleGetMethod
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: SecondVerifierTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithGet GET from method: endpointWithGet
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParam
2017-05-10 15:43:11 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /base
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGetAndPost in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /secondBase
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithGet in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithURIParam
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam/{uriParam} in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{uriParam}
2017-05-10 15:43:11 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Expected action missing: POST in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Skipping visiting action POST /secondBase/endpointWithURIParam/{uriParam} in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /base
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGetAndPost in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGetAndPost
2017-05-10 15:43:11 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Expected action missing: GET in CONTRACT
2017-05-10 15:43:11 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Expected action missing: POST in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /secondBase
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithGet in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithURIParam
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam/{uriParam} in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:11 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: SecondVerifierTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithGet GET from method: endpointWithGet
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParam
2017-05-10 15:43:11 INFO [checkers.ResourceExistenceChecker] - Performing Resource Existence Checks
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in implementation
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /secondBase
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithURIParam
2017-05-10 15:43:11 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Expected resource missing: /{differentNameParam} in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in RAML
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /secondBase
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithURIParam
2017-05-10 15:43:11 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Expected resource missing: /{uriParam} in CONTRACT
2017-05-10 15:43:11 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:11 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 3 annotated classes
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: VerifierTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: simpleMethodAllHttpMethods
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost GET from method: simpleGetMethod
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost POST from method: simpleGetMethod
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: SecondVerifierTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithGet GET from method: endpointWithGet
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParam
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: ThirdVerifierTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /thirdBase/endpointWithGet GET from method: simpleMethodAllHttpMethods
2017-05-10 15:43:11 INFO [checkers.ResourceExistenceChecker] - Performing Resource Existence Checks
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in implementation
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /base
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /secondBase
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithURIParam
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in RAML
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /base
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGetAndPost
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /secondBase
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithURIParam
2017-05-10 15:43:11 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /{uriParam}
2017-05-10 15:43:11 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Expected resource missing: /thirdBase in CONTRACT
2017-05-10 15:43:11 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:11 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-05-10 15:43:11 INFO [parser.ResourceParser] - Parsing resource: ParamTestController 
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: endpointWithGet
2017-05-10 15:43:11 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParamGet
2017-05-10 15:43:11 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Skipping visiting action POST /base/endpointWithURIParam/{uriParam} in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in SOURCE
2017-05-10 15:43:11 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-05-10 15:43:11 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param3 in CONTRACT
2017-05-10 15:43:11 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-05-10 15:43:11 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param4 in CONTRACT
Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.283 sec
Running test.phoenixnap.oss.plugin.naming.BugfixTest
2017-05-10 15:43:11 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.02 sec

Results :

Tests run: 185, Failures: 0, Errors: 0, Skipped: 0

[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spring MVC to RAML Synchronizer Maven Plugin 0.10.2
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ springmvc-raml-plugin ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.3:compile (default-compile) @ springmvc-raml-plugin ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-plugin-plugin:3.4:descriptor (default-descriptor) @ springmvc-raml-plugin ---
[INFO] Using 'UTF-8' encoding to read mojo metadata.
[INFO] Mojo extractor with id: java-javadoc found 0 mojo descriptors.
[INFO] Mojo extractor with id: java-annotations found 3 mojo descriptors.
[INFO] 
[INFO] --- maven-plugin-plugin:3.4:descriptor (mojo-descriptor) @ springmvc-raml-plugin ---
[INFO] Using 'UTF-8' encoding to read mojo metadata.
[INFO] Mojo extractor with id: java-javadoc found 0 mojo descriptors.
[INFO] Mojo extractor with id: java-annotations found 3 mojo descriptors.
[INFO] 
[INFO] --- maven-plugin-plugin:3.4:helpmojo (help-descriptor) @ springmvc-raml-plugin ---
[INFO] Using 'UTF-8' encoding to read mojo metadata.
[INFO] Mojo extractor with id: java-javadoc found 0 mojo descriptors.
[INFO] Mojo extractor with id: java-annotations found 3 mojo descriptors.
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ springmvc-raml-plugin ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 6 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.3:testCompile (default-testCompile) @ springmvc-raml-plugin ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ springmvc-raml-plugin ---
[INFO] Surefire report directory: /root/workspace/phoenixnap/springmvc-raml-plugin/213347211/springmvc-raml-plugin/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.phoenixnap.oss.ramlapisync.plugin.PojoGenerationConfigTest
2017-05-10 15:43:22 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:22 INFO [naming.SchemaHelper] - Loading referenced schema sample.json
[debug] 
[debug] -----------------------------------------------------------
[info] Generating Code for Resource: SampleController
[debug] 
[info] Generating Model object for: Sample
com/test/samples/model/Sample.java
com/test/samples/model/TArrayRef.java
[info] Generating Model object for: Sample
com/test/samples/model/Sample.java
com/test/samples/model/TArrayRef.java
[info] Generating Model object for: Sample
com/test/samples/model/Sample.java
com/test/samples/model/TArrayRef.java
[debug] 
[debug] 
com/test/samples/SampleController.java
[info] Endpoint Generation Complete in:2134ms
2017-05-10 15:43:23 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-05-10 15:43:23 INFO [naming.SchemaHelper] - Loading referenced schema sample.json
[debug] 
[debug] -----------------------------------------------------------
[info] Generating Code for Resource: SampleController
[debug] 
[info] Generating Model object for: Sample
com/test/samples/model/Sample.java
com/test/samples/model/TArrayRef.java
[info] Generating Model object for: Sample
com/test/samples/model/Sample.java
com/test/samples/model/TArrayRef.java
[info] Generating Model object for: Sample
com/test/samples/model/Sample.java
com/test/samples/model/TArrayRef.java
[debug] 
[debug] 
com/test/samples/SampleController.java
[info] Endpoint Generation Complete in:153ms
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.991 sec

Results :

Tests run: 5, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Spring MVC to RAML Synchronizer .................... SUCCESS [  0.003 s]
[INFO] Spring MVC to RAML Synchronizer Annotations ........ SUCCESS [  0.749 s]
[INFO] Spring MVC to RAML Synchronizer Parser ............. SUCCESS [  9.200 s]
[INFO] Spring MVC to RAML Synchronizer Maven Plugin ....... SUCCESS [ 12.934 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 23.318 s
[INFO] Finished at: 2017-05-10T15:43:24+02:00
[INFO] Final Memory: 38M/1193M
[INFO] ------------------------------------------------------------------------
