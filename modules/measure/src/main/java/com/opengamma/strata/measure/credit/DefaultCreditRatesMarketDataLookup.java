package com.opengamma.strata.measure.credit;

import java.io.Serializable;
import java.util.Map;
import java.util.Set;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.light.LightMetaBean;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.opengamma.strata.basics.StandardId;
import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.calc.runner.FunctionRequirements;
import com.opengamma.strata.collect.Messages;
import com.opengamma.strata.collect.tuple.Pair;
import com.opengamma.strata.data.MarketData;
import com.opengamma.strata.data.ObservableSource;
import com.opengamma.strata.market.curve.CurveId;
import com.opengamma.strata.pricer.credit.CreditRatesProvider;

@BeanDefinition(style = "light")
final class DefaultCreditRatesMarketDataLookup
    implements CreditRatesMarketDataLookup, ImmutableBean, Serializable {

  /**
   * The repo curves, keyed by group and currency.
   * The curve data, predicting the future, associated with each repo group and currency.
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<Pair<StandardId, Currency>, CurveId> creditCurveIds;

  /**
   * The issuer curves, keyed by group and currency.
   * The curve data, predicting the future, associated with each legal entity group and currency.
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<Currency, CurveId> discountCurveIds;

  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<StandardId, CurveId> recoveryRateCurveIds;
  
  /**
   * The source of market data for quotes and other observable market data.
   */
  @PropertyDefinition(validate = "notNull")
private final ObservableSource observableSource;

  //-------------------------------------------------------------------------

  public static DefaultCreditRatesMarketDataLookup of(
      Map<Pair<StandardId, Currency>, CurveId> creditCurveIds,
      Map<Currency, CurveId> discountCurveIds,
      Map<StandardId, CurveId> recoveryRateCurveIds,
      ObservableSource observableSource) {

    return new DefaultCreditRatesMarketDataLookup(
        creditCurveIds, discountCurveIds, recoveryRateCurveIds, observableSource);
  }

  //-------------------------------------------------------------------------
  @Override
  public FunctionRequirements requirements(StandardId legalEntityId, Currency currency) {

    CurveId creditCurveId = creditCurveIds.get(Pair.of(legalEntityId, currency));
    if (creditCurveId == null) {
      throw new IllegalArgumentException(Messages.format(
          "Credit rates lookup has no credit curve defined for '{}' and '{}'", legalEntityId, currency));
    }
    CurveId discountCurveId = discountCurveIds.get(currency);
    if (discountCurveId == null) {
      throw new IllegalArgumentException(Messages.format(
          "Credit rates lookup has no discount curve defined for '{}'", currency));
    }
    CurveId recoveryRateCurveId = recoveryRateCurveIds.get(legalEntityId);
    if (recoveryRateCurveId == null) {
      throw new IllegalArgumentException(Messages.format(
          "Credit rates lookup has no recovery rate curve defined for '{}'", legalEntityId));
    }

    return FunctionRequirements.builder()
        .valueRequirements(ImmutableSet.of(creditCurveId, discountCurveId, recoveryRateCurveId))
        .outputCurrencies(currency)
        .observableSource(observableSource)
        .build();
  }

  //-------------------------------------------------------------------------
  @Override
  public CreditRatesProvider creditRatesProvider(MarketData marketData) {
//    return DefaultLookupLegalEntityDiscountingProvider.of(this, marketData);
    return null;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code DefaultCreditRatesMarketDataLookup}.
   */
  private static MetaBean META_BEAN = LightMetaBean.of(DefaultCreditRatesMarketDataLookup.class);

  /**
   * The meta-bean for {@code DefaultCreditRatesMarketDataLookup}.
   * @return the meta-bean, not null
   */
  public static MetaBean meta() {
    return META_BEAN;
  }

  static {
    JodaBeanUtils.registerMetaBean(META_BEAN);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private DefaultCreditRatesMarketDataLookup(
      Map<Pair<StandardId, Currency>, CurveId> creditCurveIds,
      Map<Currency, CurveId> discountCurveIds,
      Map<StandardId, CurveId> recoveryRateCurveIds,
      ObservableSource observableSource) {
    JodaBeanUtils.notNull(creditCurveIds, "creditCurveIds");
    JodaBeanUtils.notNull(discountCurveIds, "discountCurveIds");
    JodaBeanUtils.notNull(recoveryRateCurveIds, "recoveryRateCurveIds");
    JodaBeanUtils.notNull(observableSource, "observableSource");
    this.creditCurveIds = ImmutableMap.copyOf(creditCurveIds);
    this.discountCurveIds = ImmutableMap.copyOf(discountCurveIds);
    this.recoveryRateCurveIds = ImmutableMap.copyOf(recoveryRateCurveIds);
    this.observableSource = observableSource;
  }

  @Override
  public MetaBean metaBean() {
    return META_BEAN;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the repo curves, keyed by group and currency.
   * The curve data, predicting the future, associated with each repo group and currency.
   * @return the value of the property, not null
   */
  public ImmutableMap<Pair<StandardId, Currency>, CurveId> getCreditCurveIds() {
    return creditCurveIds;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the issuer curves, keyed by group and currency.
   * The curve data, predicting the future, associated with each legal entity group and currency.
   * @return the value of the property, not null
   */
  public ImmutableMap<Currency, CurveId> getDiscountCurveIds() {
    return discountCurveIds;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the recoveryRateCurveIds.
   * @return the value of the property, not null
   */
  public ImmutableMap<StandardId, CurveId> getRecoveryRateCurveIds() {
    return recoveryRateCurveIds;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the source of market data for quotes and other observable market data.
   * @return the value of the property, not null
   */
  public ObservableSource getObservableSource() {
    return observableSource;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      DefaultCreditRatesMarketDataLookup other = (DefaultCreditRatesMarketDataLookup) obj;
      return JodaBeanUtils.equal(creditCurveIds, other.creditCurveIds) &&
          JodaBeanUtils.equal(discountCurveIds, other.discountCurveIds) &&
          JodaBeanUtils.equal(recoveryRateCurveIds, other.recoveryRateCurveIds) &&
          JodaBeanUtils.equal(observableSource, other.observableSource);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(creditCurveIds);
    hash = hash * 31 + JodaBeanUtils.hashCode(discountCurveIds);
    hash = hash * 31 + JodaBeanUtils.hashCode(recoveryRateCurveIds);
    hash = hash * 31 + JodaBeanUtils.hashCode(observableSource);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("DefaultCreditRatesMarketDataLookup{");
    buf.append("creditCurveIds").append('=').append(creditCurveIds).append(',').append(' ');
    buf.append("discountCurveIds").append('=').append(discountCurveIds).append(',').append(' ');
    buf.append("recoveryRateCurveIds").append('=').append(recoveryRateCurveIds).append(',').append(' ');
    buf.append("observableSource").append('=').append(JodaBeanUtils.toString(observableSource));
    buf.append('}');
    return buf.toString();
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
