{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Integration Test Template",
  "Parameters": {
    "RdsPassword": {
      "Description": "The master password for the RDS instance",
      "Type": "String",
      "MinLength": 8,
      "NoEcho": true
    },
    "AllowedFrom": {
      "Description": "Lockdown SSH/DB access to the host (default can be accessed from anywhere)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    }
  },
  "Resources": {
    "UserTagAndUserDataInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
        "ImageId": "ami-6a56b81d",
        "UserData": {
          "Fn::Base64": "data1:value1;data2:value2"
        },
        "InstanceType": "t1.micro",
        "Tags": [
          {
            "Key": "tag1",
            "Value": "tagv1"
          },
          {
            "Key": "tag3",
            "Value": "tagv3"
          },
          {
            "Key": "tag2",
            "Value": "tagv2"
          },
          {
            "Key": "tag4",
            "Value": "tagv4"
          }
        ]
      }
    },
    "RdsSingleMicroInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": "5",
        "DBInstanceClass": "db.t1.micro",
        "DBName": "test",
        "Engine": "mysql",
        "MasterUsername": "admin",
        "MasterUserPassword": {
          "Ref": "RdsPassword"
        },
        "Port": "3306",
        "DBSecurityGroups": [
          {
            "Ref": "AllowBuildServerGroup"
          }
        ]
      }
    },
    "RdsSingleMicroInstanceReplicaInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": "5",
        "SourceDBInstanceIdentifier": {
          "Ref": "RdsSingleMicroInstance"
        },
        "DBInstanceClass": "db.t1.micro"
      }
    },
    "AllowBuildServerGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "GroupDescription": "default",
        "DBSecurityGroupIngress": [
          {
            "CIDRIP": {
              "Ref": "AllowedFrom"
            }
          }
        ]
      }
    },
    "EmptyBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "PathMatcherBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "PathMatcherBucket01": {
      "Type": "AWS::S3::Bucket"
    },
    "PathMatcherBucket02": {
      "Type": "AWS::S3::Bucket"
    },
    "PathMatcherBucket03": {
      "Type": "AWS::S3::Bucket"
    },
    "StringQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
      }
    },
    "SendToQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
      }
    },
    "JsonQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
      }
    },
    "StreamQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
      }
    },
    "LoadTestQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
      }
    },
    "QueueListenerTest": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
      }
    },
    "QueueWithRedrivePolicy": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "RedrivePolicy": {
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "DeadLetterQueue",
              "Arn"
            ]
          },
          "maxReceiveCount": 1
        }
      }
    },
    "DeadLetterQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
      }
    },
    "NotificationQueue": {
      "Type": "AWS::SQS::Queue"
    },
    "ManualDeletionQueue": {
      "Type": "AWS::SQS::Queue"
    },
    "SqsReceivingSnsTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "NotificationQueue",
                "Arn"
              ]
            },
            "Protocol": "sqs"
          }
        ]
      }
    },
    "SnsToSqsPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2008-10-17",
          "Id": "SnsToSqsPolicy",
          "Statement": [
            {
              "Sid": "Allow-Sns-SendMessage",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "NotificationQueue",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "SqsReceivingSnsTopic"
                  }
                }
              }
            }
          ]
        },
        "Queues": [
          {
            "Ref": "NotificationQueue"
          }
        ]
      }
    },
    "HttpReceivingSnsTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": "https://build.elasticspring.org",
            "Protocol": "https"
          }
        ]
      }
    },
    "CacheSecurityGroup": {
      "Type": "AWS::ElastiCache::SecurityGroup",
      "Properties": {
        "Description": "Default Security Group"
      }
    },
    "CacheSecurityGroupIngress": {
      "Type": "AWS::ElastiCache::SecurityGroupIngress",
      "Properties": {
        "CacheSecurityGroupName": {
          "Ref": "CacheSecurityGroup"
        },
        "EC2SecurityGroupName": "default"
      }
    },
    "CacheCluster": {
      "Type": "AWS::ElastiCache::CacheCluster",
      "Properties": {
        "CacheNodeType": "cache.t1.micro",
        "CacheSecurityGroupNames": [
          {
            "Ref": "CacheSecurityGroup"
          }
        ],
        "Engine": "memcached",
        "NumCacheNodes": "1"
      }
    },
    "RedisCacheCluster": {
      "Type": "AWS::ElastiCache::CacheCluster",
      "Properties": {
        "CacheNodeType": "cache.t1.micro",
        "CacheSecurityGroupNames": [
          {
            "Ref": "CacheSecurityGroup"
          }
        ],
        "Engine": "redis",
        "NumCacheNodes": "1"
      }
    }
  },
  "Outputs": {
    "InstanceId": {
      "Value": {
        "Ref": "UserTagAndUserDataInstance"
      }
    }
  }
}